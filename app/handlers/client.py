
import datetime
import logging
from contextlib import suppress

from aiogram import F, Router, types, Bot
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import Settings
from app.handlers.states import OrderStates
from app.keyboards.client_kb import (
    ADDITIONAL_SERVICES,
    create_calendar,
    get_address_confirmation_keyboard,
    get_address_keyboard,
    get_additional_services_keyboard,
    get_bathroom_count_keyboard,
    get_cleaning_type_keyboard,
    get_confirmation_keyboard,
    get_main_menu_keyboard,
    get_order_name_keyboard,
    get_order_phone_keyboard,
    get_payment_keyboard,
    get_photo_keyboard,
    get_room_count_keyboard,
    get_time_keyboard,
)
from app.services.db_queries import (
    create_order,
    create_user,
    get_user,
    get_user_orders,
    update_order_status,
    OrderStatus, get_order_by_id
)
from app.services.price_calculator import ADDITIONAL_SERVICE_PRICES, calculate_preliminary_cost
from app.services.yandex_maps_api import get_address_from_coords, get_address_from_text

router = Router()

# –°–ø–∏—Å–æ–∫ –º–µ—Å—è—Ü–µ–≤ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
RUSSIAN_MONTHS_GENITIVE = {
    1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è", 5: "–º–∞—è", 6: "–∏—é–Ω—è",
    7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞", 9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
}



@router.message(CommandStart())
async def cmd_start(message: types.Message, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await state.clear()
    user = await get_user(session, message.from_user.id)

    if user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º
        await message.answer(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.name}!",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –°–û–ó–î–ê–ï–ú –ï–ì–û –°–†–ê–ó–£
        await create_user(
            session,
            telegram_id=message.from_user.id,
            name=message.from_user.full_name
            # –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º
        )
        await message.answer(
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ.",
            reply_markup=get_main_menu_keyboard()
        )

@router.message(F.text == "üì¶ –ó–∞–∫–∞–∑–∞—Ç—å —É–±–æ—Ä–∫—É")
async def start_order(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–±–æ—Ä–∫–∏:",
        reply_markup=get_cleaning_type_keyboard()
    )
    await state.set_state(OrderStates.choosing_cleaning_type)


@router.message(
    OrderStates.choosing_cleaning_type,
    F.text.in_({"üßΩ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è", "üßº –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è", "üõ† –ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞"})
)
async def handle_cleaning_type(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —É–±–æ—Ä–∫–∏ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç."""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —É–±–æ—Ä–∫–∏
    await state.update_data(cleaning_type=message.text)

    await message.answer(
        "–ó–∞–ø–∏—Å–∞–ª. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:",
        reply_markup=get_room_count_keyboard()
    )
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    await state.set_state(OrderStates.choosing_room_count)

@router.message(
    OrderStates.choosing_room_count,
    F.text.in_({"1", "2", "3", "4", "5+"})
)
async def handle_room_count(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–Ω—É–∑–ª–æ–≤."""
    await state.update_data(room_count=message.text)
    await message.answer(
        "–ü—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–Ω—É–∑–ª–æ–≤:",
        reply_markup=get_bathroom_count_keyboard()
    )
    await state.set_state(OrderStates.choosing_bathroom_count)


@router.message(
    OrderStates.choosing_bathroom_count,
    F.text.in_({"1", "2", "3+"})
)
async def handle_bathroom_count(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∞–Ω—É–∑–ª–æ–≤, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –¥–æ–ø. —É—Å–ª—É–≥.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–Ω—É–∑–ª–æ–≤
    await state.update_data(bathroom_count=message.text)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    cost = calculate_preliminary_cost(
        cleaning_type=user_data.get("cleaning_type"),
        room_count_str=user_data.get("room_count"),
        bathroom_count_str=user_data.get("bathroom_count")
    )

    await state.update_data(preliminary_cost=cost)

    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–±–æ—Ä–∫–∏: <b>{cost} ‚ÇΩ</b>.\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω—É–∂–Ω—ã, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
        reply_markup=get_additional_services_keyboard()
    )
    await state.set_state(OrderStates.choosing_additional_services)


@router.message(F.text == "üí¨ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def my_orders(message: types.Message, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤, —Ä–∞–∑–¥–µ–ª—è—è –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ."""
    orders = await get_user_orders(session, client_tg_id=message.from_user.id)

    if not orders:
        await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return

    # –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–∫–∞–∑—ã –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ/–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ
    active_orders = [o for o in orders if o.status in (OrderStatus.new, OrderStatus.accepted, OrderStatus.in_progress)]
    completed_orders = [o for o in orders if o.status in (OrderStatus.completed, OrderStatus.cancelled)]

    response_text = ""

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    if active_orders:
        response_text += "<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b>\n\n"
        for order in active_orders:
            response_text += (
                f"<b>–ó–∞–∫–∞–∑ ‚Ññ{order.id}</b> –æ—Ç {order.created_at.strftime('%d.%m.%Y')}\n"
                f"–°—Ç–∞—Ç—É—Å: <i>{order.status.value}</i>, –°—É–º–º–∞: {order.total_price} ‚ÇΩ\n"
                f"–ê–¥—Ä–µ—Å: {order.address_text}\n\n"
            )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    if completed_orders:
        response_text += "<b>–ê—Ä—Ö–∏–≤ –∑–∞–∫–∞–∑–æ–≤:</b>\n\n"
        for order in completed_orders:
            response_text += (
                f"<b>–ó–∞–∫–∞–∑ ‚Ññ{order.id}</b> –æ—Ç {order.created_at.strftime('%d.%m.%Y')}\n"
                f"–°—Ç–∞—Ç—É—Å: <i>{order.status.value}</i>, –°—É–º–º–∞: {order.total_price} ‚ÇΩ\n\n"
            )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–û—Ç–º–µ–Ω–∏—Ç—å" –∏ "–ó–∞–∫–∞–∑–∞—Ç—å —Å–Ω–æ–≤–∞"
    keyboard = InlineKeyboardBuilder()
    for order in active_orders:
        keyboard.button(text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ññ{order.id}", callback_data=f"cancel_order:{order.id}")
    for order in completed_orders:
        keyboard.button(text=f"üîÑ –ó–∞–∫–∞–∑–∞—Ç—å —Å–Ω–æ–≤–∞ ‚Ññ{order.id}", callback_data=f"repeat_order:{order.id}")

    # –í—ã—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
    keyboard.adjust(1)

    await message.answer(response_text, reply_markup=keyboard.as_markup())


@router.callback_query(F.data.startswith("cancel_order:"))
async def cancel_order(callback: types.CallbackQuery, session: AsyncSession, bot: Bot, config: Settings):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞."""
    order_id = int(callback.data.split(":")[1])

    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    updated_order = await update_order_status(session, order_id, OrderStatus.cancelled)

    if updated_order:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫—É
        await callback.message.edit_text(
            f"<b>–ó–∞–∫–∞–∑ ‚Ññ{updated_order.id} –æ—Ç {updated_order.created_at.strftime('%d.%m.%Y')}</b>\n"
            f"–°—Ç–∞—Ç—É—Å: <i>{updated_order.status.value}</i>\n"
            f"–°—É–º–º–∞: {updated_order.total_price} ‚ÇΩ\n"
            f"–ê–¥—Ä–µ—Å: {updated_order.address_text}"
        )
        await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await bot.send_message(
            chat_id=config.admin_id,
            text=f"‚ùóÔ∏è <b>–ö–ª–∏–µ–Ω—Ç @{callback.from_user.username} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ ‚Ññ{order_id}.</b>"
        )
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑.", show_alert=True)


@router.callback_query(F.data.startswith("repeat_order:"))
async def repeat_order(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä –∑–∞–∫–∞–∑–∞, –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ."""
    await callback.answer("–ó–∞–ø–æ–ª–Ω—è—é –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ—à–ª–æ–≥–æ –∑–∞–∫–∞–∑–∞...")
    order_id = int(callback.data.split(":")[1])

    old_order = await get_order_by_id(session, order_id)
    if not old_order:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—à–ª–æ–º –∑–∞–∫–∞–∑–µ.", show_alert=True)
        return

    # "–ö–ª–æ–Ω–∏—Ä—É–µ–º" –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_data({
        "cleaning_type": old_order.cleaning_type,
        "room_count": old_order.room_count,
        "bathroom_count": old_order.bathroom_count,
        "selected_services": {item.service_key for item in old_order.items},
        "address_text": old_order.address_text,
        "address_lat": old_order.address_lat,
        "address_lon": old_order.address_lon,
        "order_name": old_order.order_name,
        "order_phone": old_order.order_phone,
        "total_cost": old_order.total_price
    })

    user_data = await state.get_data()

    # --- –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—ç—Ç–æ—Ç –±–ª–æ–∫ –∫–æ–¥–∞ –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é) ---
    selected_services_keys = user_data.get("selected_services", set())
    selected_services_text = "\n".join(
        [f"    - {ADDITIONAL_SERVICES[key]}" for key in selected_services_keys]
    ) or "–ù–µ—Ç"

    summary_text = (
        f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑:</b>\n\n"
        f"<i>–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}. "
        f"–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞—Ö.</i>\n\n"
        f"<b>–¢–∏–ø —É–±–æ—Ä–∫–∏:</b> {user_data.get('cleaning_type')}\n"
        # ... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ, –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ handle_order_phone ...
        f"üí∞ <b>–ò–¢–û–ì–û–í–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {user_data.get('total_cost')} ‚ÇΩ</b>"
    )

    # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"
    await callback.message.edit_reply_markup(reply_markup=None)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —à–∞–≥ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –µ–µ –∏–∑–º–µ–Ω–∏—Ç—å
    now = datetime.datetime.now()
    await callback.message.answer(summary_text)
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞:",
        reply_markup=await create_calendar(now.year, now.month)
    )
    await state.set_state(OrderStates.choosing_date)

@router.message(F.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'."""
    await message.answer("–≠—Ç–æ —Ä–∞–∑–¥–µ–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –í—Å–∫–æ—Ä–µ –º—ã –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–∏–º.")


@router.callback_query(
    OrderStates.choosing_additional_services,
    F.data.startswith("add_service_")
)
async def handle_add_service(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä/–æ—Ç–º–µ–Ω—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —É—Å–ª—É–≥–∏."""
    service_key = callback.data.split("_")[-1]

    user_data = await state.get_data()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ø–∏—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å RuntimeError
    selected_services = user_data.get("selected_services", set()).copy()

    if service_key in selected_services:
        selected_services.remove(service_key)
    else:
        selected_services.add(service_key)

    await state.update_data(selected_services=selected_services)

    # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    preliminary_cost = user_data.get("preliminary_cost", 0)
    additional_cost = sum(ADDITIONAL_SERVICE_PRICES.get(s, 0) for s in selected_services)
    total_cost = preliminary_cost + additional_cost

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(total_cost=total_cost)

    with suppress(TelegramBadRequest):
        await callback.message.edit_text(
            f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–±–æ—Ä–∫–∏: <b>{total_cost} ‚ÇΩ</b>.\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
            reply_markup=get_additional_services_keyboard(selected_services)
        )
    await callback.answer()

@router.callback_query(
    OrderStates.choosing_additional_services,
    F.data == "done_services"
)
async def done_additional_services(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—ã–±–æ—Ä –¥–æ–ø. —É—Å–ª—É–≥ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤–≤–æ–¥—É –∞–¥—Ä–µ—Å–∞."""
    user_data = await state.get_data()
    # –ï—Å–ª–∏ total_cost –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω–µ –≤—ã–±—Ä–∞–Ω—ã –¥–æ–ø. —É—Å–ª—É–≥–∏),
    # —Ç–æ –æ–Ω —Ä–∞–≤–µ–Ω preliminary_cost
    if "total_cost" not in user_data:
        await state.update_data(total_cost=user_data.get("preliminary_cost"))

    await callback.message.delete() # –£–¥–∞–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
        reply_markup=get_address_keyboard()
    )
    await state.set_state(OrderStates.entering_address)
    await callback.answer()

@router.message(OrderStates.entering_address, F.location)
async def handle_address_location(message: types.Message, state: FSMContext, config: Settings):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –ø–æ–ª—É—á–∞–µ—Ç –∞–¥—Ä–µ—Å –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    lat, lon = message.location.latitude, message.location.longitude
    address_text = await get_address_from_coords(lat, lon, config.api_keys.yandex_api_key)

    if address_text:
        await state.update_data(address_lat=lat, address_lon=lon, address_text=address_text)
        await message.answer(
            f"–í–∞—à –∞–¥—Ä–µ—Å: <b>{address_text}</b>.\n–í—Å–µ –≤–µ—Ä–Ω–æ?",
            reply_markup=get_address_confirmation_keyboard()
        )
        await state.set_state(OrderStates.confirming_address)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.")


@router.message(OrderStates.entering_address, F.text)
async def handle_address_text(message: types.Message, state: FSMContext, config: Settings):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–æ–ø. —É—Å–ª—É–≥–∞–º":
        await back_to_additional_services(message, state)
        return

    validated_address = await get_address_from_text(message.text, config.api_keys.yandex_api_key)
    if validated_address:
        await state.update_data(address_text=validated_address)
        await message.answer(
            f"–ú—ã —É—Ç–æ—á–Ω–∏–ª–∏ –≤–∞—à –∞–¥—Ä–µ—Å: <b>{validated_address}</b>.\n–í—Å–µ –≤–µ—Ä–Ω–æ?",
            reply_markup=get_address_confirmation_keyboard()
        )
        await state.set_state(OrderStates.confirming_address)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.")


@router.message(OrderStates.confirming_address, F.text == "‚úÖ –î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ")
async def handle_address_confirmation(message: types.Message, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞."""
    now = datetime.datetime.now()
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É:",
        reply_markup=await create_calendar(now.year, now.month)
    )
    await state.set_state(OrderStates.choosing_date)


@router.message(OrderStates.confirming_address, F.text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")
async def handle_reenter_address(message: types.Message, state: FSMContext):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –∑–∞–Ω–æ–≤–æ."""
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º (–ì–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º):",
        reply_markup=types.ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    )
    await state.set_state(OrderStates.entering_address)


# --- –ë–õ–û–ö: –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–ê–õ–ï–ù–î–ê–†–Ø ---
@router.callback_query(OrderStates.choosing_date, F.data.startswith("month_nav:"))
async def process_calendar_navigation(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é '–≤–ø–µ—Ä–µ–¥'/'–Ω–∞–∑–∞–¥' –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é."""
    user_id = callback.from_user.id
    username = callback.from_user.username or "unknown"
    try:
        _, direction, year_str, month_str = callback.data.split(":")
        year, month = int(year_str), int(month_str)

        if direction == "next":
            month += 1
            if month > 12:
                month = 1
                year += 1
        elif direction == "prev":
            month -= 1
            if month < 1:
                month = 12
                year -= 1
        with suppress(TelegramBadRequest):
            await callback.message.edit_reply_markup(
                reply_markup=await create_calendar(year, month)
            )
    except Exception as e:
        logging.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é: {e}",
            extra={"username": username, "user_id": user_id}
        )
    finally:
        await callback.answer()


@router.callback_query(OrderStates.choosing_date, F.data == "back_to_address")
async def back_to_address_step(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞."""
    await callback.message.delete()
    await callback.message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤–≤–æ–¥—É –∞–¥—Ä–µ—Å–∞. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.",
        reply_markup=get_address_keyboard()
    )
    await state.set_state(OrderStates.entering_address)
    await callback.answer()


@router.callback_query(OrderStates.choosing_date, F.data.startswith("day:"))
async def process_date_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏."""
    date_str = callback.data.split(":")[1]
    await state.update_data(selected_date=date_str)

    user_id = callback.from_user.id
    username = callback.from_user.username or "unknown"
    logging.info(
        f"–í—ã–±—Ä–∞–ª –¥–∞—Ç—É: {date_str}",
        extra={"username": username, "user_id": user_id}
    )
    try:
        selected_date = datetime.datetime.strptime(date_str, "%Y-%m-%d")
        day = selected_date.day
        month_name = RUSSIAN_MONTHS_GENITIVE[selected_date.month]
        year = selected_date.year
        formatted_date = f"{day} {month_name} {year}"
    except (ValueError, KeyError):
        formatted_date = date_str

    await callback.message.delete()
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {formatted_date}.\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:",
        reply_markup=get_time_keyboard()
    )
    await state.set_state(OrderStates.choosing_time)
    await callback.answer()

@router.message(OrderStates.choosing_time, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã")
async def back_to_date_selection(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã (–∫–∞–ª–µ–Ω–¥–∞—Ä—é)."""
    now = datetime.datetime.now()
    # –£–±–∏—Ä–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º inline
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã.", reply_markup=types.ReplyKeyboardRemove())
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É:",
        reply_markup=await create_calendar(now.year, now.month)
    )
    await state.set_state(OrderStates.choosing_date)


@router.message(OrderStates.choosing_time, F.text)
async def handle_time_selection(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —à–∞–≥—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ."""
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã":
        await back_to_date_selection(message, state)
        return

    await state.update_data(selected_time=message.text)
    await message.answer(
        "–í—Ä–µ–º—è –≤—ã–±—Ä–∞–Ω–æ. –ü–æ –∂–µ–ª–∞–Ω–∏—é, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã, "
        "—á—Ç–æ–±—ã –º—ã –ª—É—á—à–µ –æ—Ü–µ–Ω–∏–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å. –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
        reply_markup=get_photo_keyboard()
    )
    await state.set_state(OrderStates.waiting_for_photo)

# --- –ë–õ–û–ö: –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –®–ê–ì–ê –° –§–û–¢–û ---

@router.message(OrderStates.waiting_for_photo, F.photo)
async def handle_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏."""
    await state.update_data(photo_file_id=message.photo[-1].file_id)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ, —Ñ–æ—Ç–æ –ø–æ–ª—É—á–∏–ª. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –∑–∞–∫–∞–∑–∞.",
        reply_markup=get_order_name_keyboard()
    )
    await state.set_state(OrderStates.entering_order_name)

@router.message(OrderStates.waiting_for_photo, F.text == "‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–ø—É—Å–∫ —à–∞–≥–∞ —Å —Ñ–æ—Ç–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏."""
    await message.answer(
        "–•–æ—Ä–æ—à–æ, –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —ç—Ç–æ—Ç —à–∞–≥. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –∑–∞–∫–∞–∑–∞.",
        reply_markup=get_order_name_keyboard()
    )
    await state.set_state(OrderStates.entering_order_name)


@router.message(OrderStates.waiting_for_photo, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏")
async def back_to_time_selection(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏."""
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏. –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:",
        reply_markup=get_time_keyboard()
    )
    await state.set_state(OrderStates.choosing_time)


# --- –ù–û–í–´–ô –ë–õ–û–ö: –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ù–¢–ê–ö–¢–ù–´–• –î–ê–ù–ù–´–• ---

@router.message(OrderStates.entering_order_name, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–æ—Ç–æ")
async def back_to_photo_step(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —à–∞–≥—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ."""
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ —à–∞–≥—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ. –ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        reply_markup=get_photo_keyboard()
    )
    await state.set_state(OrderStates.waiting_for_photo)


@router.message(OrderStates.entering_order_name, F.text)
async def handle_order_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω."""
    await state.update_data(order_name=message.text)
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ, {message.text}. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.",
        reply_markup=get_order_phone_keyboard()
    )
    await state.set_state(OrderStates.entering_order_phone)


@router.message(OrderStates.entering_order_phone, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–º–µ–Ω–∏")
async def back_to_name_step(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏."""
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –∑–∞–∫–∞–∑–∞:",
        reply_markup=get_order_name_keyboard()
    )
    await state.set_state(OrderStates.entering_order_name)

@router.message(OrderStates.confirming_order, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
async def back_to_phone_step(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤–≤–æ–¥—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.",
        reply_markup=get_order_phone_keyboard()
    )
    await state.set_state(OrderStates.entering_order_phone)

@router.message(OrderStates.entering_order_phone, (F.contact | F.text))
async def handle_order_phone(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    phone_number = message.contact.phone_number if message.contact else message.text
    await state.update_data(order_phone=phone_number)

    user_data = await state.get_data()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    date_str = user_data.get('selected_date')
    try:
        selected_date = datetime.datetime.strptime(date_str, "%Y-%m-%d")
        formatted_date = f"{selected_date.day} {RUSSIAN_MONTHS_GENITIVE[selected_date.month]} {selected_date.year}"
    except (ValueError, KeyError, TypeError):
        formatted_date = date_str

    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–ø. —É—Å–ª—É–≥–∞—Ö
    selected_services_keys = user_data.get("selected_services", set())
    selected_services_text = "\n".join(
        [f"    - {ADDITIONAL_SERVICES[key]}" for key in selected_services_keys]
    ) or "–ù–µ—Ç"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    summary_text = (
        f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:</b>\n\n"
        f"<b>–¢–∏–ø —É–±–æ—Ä–∫–∏:</b> {user_data.get('cleaning_type')}\n"
        f"<b>–ö–æ–º–Ω–∞—Ç:</b> {user_data.get('room_count')}, <b>–°–∞–Ω—É–∑–ª–æ–≤:</b> {user_data.get('bathroom_count')}\n\n"
        f"<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n{selected_services_text}\n\n"
        f"üìç <b>–ê–¥—Ä–µ—Å:</b> {user_data.get('address_text', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {formatted_date}\n"
        f"üïí <b>–í—Ä–µ–º—è:</b> {user_data.get('selected_time')}\n\n"
        f"üë§ <b>–ò–º—è:</b> {user_data.get('order_name')}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_data.get('order_phone')}\n\n"
        f"üí∞ <b>–ò–¢–û–ì–û–í–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {user_data.get('total_cost')} ‚ÇΩ</b>"
    )

    await message.answer(text=summary_text, reply_markup=get_confirmation_keyboard())
    await state.set_state(OrderStates.confirming_order)


@router.message(OrderStates.confirming_order, F.text == "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def handle_confirmation(message: types.Message, state: FSMContext): # <--- –£–ë–†–ê–ù session
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã."""
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=get_payment_keyboard()
    )
    await state.set_state(OrderStates.choosing_payment_method)

@router.message(OrderStates.confirming_order, F.text == "‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def handle_cancel_order(message: types.Message, state: FSMContext): # <--- –£–ë–†–ê–ù session
    """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–∫–∞–∑ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.clear()
    await message.answer(
        "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_menu_keyboard()
    )

@router.message(OrderStates.choosing_payment_method, F.text == "üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é")
async def handle_payment_cash(message: types.Message, state: FSMContext, session: AsyncSession, bots: dict, config: Settings): # <--- –ò–°–ü–û–õ–¨–ó–£–ï–ú bots
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–ª–∞—Ç—É –Ω–∞–ª–∏—á–Ω—ã–º–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–∫–∞–∑ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞."""
    user_data = await state.get_data()
    await create_order(session, user_data, client_tg_id=message.from_user.id)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É. –ú—ã —Å–∫–æ—Ä–æ –ø–æ–¥–±–µ—Ä–µ–º –¥–ª—è –≤–∞—Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.",
        reply_markup=get_main_menu_keyboard()
    )
    summary_text = (
        f"‚úÖ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n\n"
        f"<b>–ö–ª–∏–µ–Ω—Ç:</b> @{message.from_user.username} ({message.from_user.id})\n"
        f"<b>–ò–º—è –≤ –∑–∞–∫–∞–∑–µ:</b> {user_data.get('order_name')}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_data.get('order_phone')}\n\n"
        f"<b>–ê–¥—Ä–µ—Å:</b> {user_data.get('address_text', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {user_data.get('selected_date')} {user_data.get('selected_time')}\n\n"
        f"üí∞ <b>–ò–¢–û–ì–û–í–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {user_data.get('total_cost')} ‚ÇΩ</b>\n"
        f"<b>–¢–∏–ø –æ–ø–ª–∞—Ç—ã:</b> –ù–∞–ª–∏—á–Ω—ã–µ"
    )
    await bots["admin"].send_message(chat_id=config.admin_id, text=summary_text)
    await state.clear()

@router.message(OrderStates.choosing_payment_method, F.text == "üí≥ –û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞")
async def handle_payment_online(message: types.Message): # <--- –£–ë–†–ê–ù state
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—É."""
    await message.answer(
        "–†–∞–∑–¥–µ–ª –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞–ª–∏—á–Ω—ã–º–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.",
        reply_markup=get_payment_keyboard()
    )

# --- –ï–î–ò–ù–´–ô –ë–õ–û–ö –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í "–ù–ê–ó–ê–î" ---

@router.message(OrderStates.choosing_cleaning_type, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.clear()
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_menu_keyboard()
    )

@router.message(OrderStates.choosing_room_count, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_cleaning_type(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —É–±–æ—Ä–∫–∏."""
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —É–±–æ—Ä–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
        reply_markup=get_cleaning_type_keyboard()
    )
    await state.set_state(OrderStates.choosing_cleaning_type)

@router.message(OrderStates.choosing_bathroom_count, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_room_count(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç."""
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
        reply_markup=get_room_count_keyboard()
    )
    await state.set_state(OrderStates.choosing_room_count)

@router.callback_query(OrderStates.choosing_additional_services, F.data == "back_to_bathrooms")
async def back_to_bathroom_count(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∞–Ω—É–∑–ª–æ–≤."""
    await callback.message.delete()
    await callback.message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∞–Ω—É–∑–ª–æ–≤.",
        reply_markup=get_bathroom_count_keyboard()
    )
    await state.set_state(OrderStates.choosing_bathroom_count)
    await callback.answer()

@router.message(OrderStates.entering_address, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–æ–ø. —É—Å–ª—É–≥–∞–º")
async def back_to_additional_services(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –¥–æ–ø. —É—Å–ª—É–≥."""
    user_data = await state.get_data()
    selected_services = user_data.get("selected_services", set())
    total_cost = user_data.get("total_cost", user_data.get("preliminary_cost", 0))

    await message.answer(
        f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–±–æ—Ä–∫–∏: <b>{total_cost} ‚ÇΩ</b>.\n\n"
        f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥–∏:",
        reply_markup=get_additional_services_keyboard(selected_services)
    )
    await state.set_state(OrderStates.choosing_additional_services)

# --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê ---