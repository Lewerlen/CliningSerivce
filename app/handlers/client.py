import datetime
import logging
from contextlib import suppress
from typing import List
from zoneinfo import ZoneInfo
from aiogram import F, Router, types, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile, InputMediaPhoto
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from app.services.db_queries import get_matching_executors
from app.config import Settings
from app.handlers.states import OrderStates, SupportStates, RatingStates, ChatStates
from app.keyboards.executor_kb import get_new_order_notification_keyboard, get_order_changes_confirmation_keyboard
from app.keyboards.client_kb import (
    ADDITIONAL_SERVICES, get_exit_chat_keyboard,
    get_support_menu_keyboard, get_reply_to_chat_keyboard,
    create_calendar,
    get_active_orders_keyboard,
    get_view_order_keyboard,
    get_archive_orders_keyboard,
    get_view_archive_order_keyboard,
    get_address_confirmation_keyboard,
    get_address_keyboard,
    get_additional_services_keyboard,
    get_bathroom_count_keyboard,
    get_cleaning_type_keyboard,
    get_confirmation_keyboard,
    get_edit_order_keyboard,
    get_main_menu_keyboard,
    get_order_name_keyboard,
    get_order_phone_keyboard,
    get_payment_keyboard,
    get_photo_keyboard,
    get_room_count_keyboard,
    get_time_keyboard,
    get_view_ticket_keyboard,
    get_my_tickets_keyboard,
    get_skip_photo_keyboard,
    get_rating_keyboard
)
from app.services.db_queries import (
    create_order,
    create_ticket,
    create_user,
    get_user,
    get_user_orders,
    update_order_datetime,
    update_order_services_and_price,
    update_order_address,
    update_order_rooms_and_price,
    update_order_status,
    OrderStatus, get_order_by_id,
    get_ticket_by_id,
    get_user_tickets,
    add_message_to_ticket,
    update_ticket_status,
    save_order_rating, update_executor_rating, update_user_phone, create_order_offer
)
from app.database.models import MessageAuthor, TicketStatus, User, Order
from app.services.price_calculator import ADDITIONAL_SERVICE_PRICES, calculate_preliminary_cost, calculate_total_cost
from app.services.yandex_maps_api import get_address_from_coords, get_address_from_text
from app.common.texts import STATUS_MAPPING, RUSSIAN_MONTHS_GENITIVE

TYUMEN_TZ = ZoneInfo("Asia/Yekaterinburg") # UTC+5, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¢—é–º–µ–Ω–∏
ALL_TIME_SLOTS = ["9:00 - 12:00", "12:00 - 15:00", "15:00 - 18:00", "18:00 - 21:00"]

router = Router()
@router.message(CommandStart())
async def cmd_start(message: types.Message, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await state.clear()
    user = await get_user(session, message.from_user.id)

    if user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º
        await message.answer(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.name}!",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –°–û–ó–î–ê–ï–ú –ï–ì–û –°–†–ê–ó–£
        await create_user(
            session,
            telegram_id=message.from_user.id,
            name=message.from_user.full_name
            # –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º
        )
        await message.answer(
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ.",
            reply_markup=get_main_menu_keyboard()
        )

@router.message(F.text == "üì¶ –ó–∞–∫–∞–∑–∞—Ç—å —É–±–æ—Ä–∫—É")
async def start_order(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–±–æ—Ä–∫–∏:",
        reply_markup=get_cleaning_type_keyboard()
    )
    await state.set_state(OrderStates.choosing_cleaning_type)


@router.message(
    OrderStates.choosing_cleaning_type,
    F.text.in_({"üßΩ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è", "üßº –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è", "üõ† –ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞"})
)
async def handle_cleaning_type(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —É–±–æ—Ä–∫–∏ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç."""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —É–±–æ—Ä–∫–∏
    await state.update_data(cleaning_type=message.text)

    await message.answer(
        "–ó–∞–ø–∏—Å–∞–ª. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:",
        reply_markup=get_room_count_keyboard()
    )
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    await state.set_state(OrderStates.choosing_room_count)

@router.message(
    OrderStates.choosing_room_count,
    F.text.in_({"1", "2", "3", "4", "5+"})
)
async def handle_room_count(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–Ω—É–∑–ª–æ–≤."""
    await state.update_data(room_count=message.text)
    await message.answer(
        "–ü—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–Ω—É–∑–ª–æ–≤:",
        reply_markup=get_bathroom_count_keyboard()
    )
    await state.set_state(OrderStates.choosing_bathroom_count)


@router.message(
    OrderStates.choosing_bathroom_count,
    F.text.in_({"1", "2", "3+"})
)
async def handle_bathroom_count(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∞–Ω—É–∑–ª–æ–≤, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –¥–æ–ø. —É—Å–ª—É–≥.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–Ω—É–∑–ª–æ–≤
    await state.update_data(bathroom_count=message.text)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    cost = calculate_preliminary_cost(
        cleaning_type=user_data.get("cleaning_type"),
        room_count_str=user_data.get("room_count"),
        bathroom_count_str=user_data.get("bathroom_count")
    )

    await state.update_data(preliminary_cost=cost)

    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é, –∫–æ—Ç–æ—Ä–æ–µ —É–±–∏—Ä–∞–µ—Ç –Ω–∏–∂–Ω—é—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–±–æ—Ä–∫–∏: <b>{cost} ‚ÇΩ</b>.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–æ–ø. —É—Å–ª—É–≥
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω—É–∂–Ω—ã, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
        reply_markup=get_additional_services_keyboard()
    )
    await state.set_state(OrderStates.choosing_additional_services)


@router.message(F.text == "üí¨ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def my_orders(message: types.Message, session: AsyncSession, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫."""
    await state.clear()  # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    orders = await get_user_orders(session, client_tg_id=message.from_user.id)
    active_orders = [o for o in orders if o.status in (OrderStatus.new, OrderStatus.accepted, OrderStatus.in_progress, OrderStatus.pending_confirmation)]

    if not active_orders:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∞—Ä—Ö–∏–≤
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üóÇ –ê—Ä—Ö–∏–≤ –∑–∞–∫–∞–∑–æ–≤", callback_data="view_archive")]
            ])
        )
        return

    await message.answer(
        "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:",
        reply_markup=get_active_orders_keyboard(active_orders)
    )

@router.callback_query(F.data.startswith("edit_order:"))
async def edit_order_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    order_id = int(callback.data.split(":")[1])
    await state.update_data(order_id_to_edit=order_id)

    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω –∑–∞–∫–∞–∑ ‚Ññ{order_id}. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=get_edit_order_keyboard()
    )
    await state.set_state(OrderStates.editing_order)
    await callback.answer()


@router.callback_query(F.data.startswith("view_order:"))
async def view_order(callback: types.CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ."""
    order_id = int(callback.data.split(":")[1])
    order = await get_order_by_id(session, order_id)

    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    can_be_edited = False
    try:
        order_start_time_str = order.selected_time.split(' ')[0]
        order_datetime_str = f"{order.selected_date} {order_start_time_str}"
        naive_order_datetime = datetime.datetime.strptime(order_datetime_str, "%Y-%m-%d %H:%M")

        # –î–µ–ª–∞–µ–º –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ "–æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã–º" –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
        aware_order_datetime = naive_order_datetime.replace(tzinfo=TYUMEN_TZ)

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –≤ —Ç–æ–π –∂–µ —Ç–∞–π–º–∑–æ–Ω–µ
        if aware_order_datetime - datetime.datetime.now(tz=TYUMEN_TZ) > datetime.timedelta(hours=12):
            can_be_edited = True
    except (ValueError, IndexError):
        pass  # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –¥–∞—Ç–æ–π, –ø—Ä–æ—Å—Ç–æ –Ω–µ –¥–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å

    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–ø. —É—Å–ª—É–≥–∞—Ö
    selected_services_text = "\n".join(
        [f"    - {ADDITIONAL_SERVICES[item.service_key]}" for item in order.items]
    ) or "–ù–µ—Ç"

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    try:
        selected_date = datetime.datetime.strptime(order.selected_date, "%Y-%m-%d")
        formatted_date = f"{selected_date.day} {RUSSIAN_MONTHS_GENITIVE[selected_date.month]} {selected_date.year}"
    except (ValueError, KeyError, TypeError):
        formatted_date = order.selected_date

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    order_details = (
        f"<b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id}</b>\n\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> <i>{STATUS_MAPPING.get(order.status, order.status.value)}</i>\n"
        f"<b>–¢–∏–ø —É–±–æ—Ä–∫–∏:</b> {order.cleaning_type}\n"
        f"<b>–ö–æ–º–Ω–∞—Ç:</b> {order.room_count}, <b>–°–∞–Ω—É–∑–ª–æ–≤:</b> {order.bathroom_count}\n\n"
        f"<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n{selected_services_text}\n\n"
        f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.address_text}\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {formatted_date}\n"
        f"üïí <b>–í—Ä–µ–º—è:</b> {order.selected_time}\n\n"
        f"üí∞ <b>–ò–¢–û–ì–û–í–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {order.total_price} ‚ÇΩ</b>"
    )

    await callback.message.edit_text(
        order_details,
        reply_markup=get_view_order_keyboard(order, can_be_edited=can_be_edited)
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_orders_list")
async def back_to_orders_list(callback: types.CallbackQuery, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤."""
    # –ú—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–≤–∞—Ç—å my_orders, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ message,
    # –∞ —É –Ω–∞—Å callback. –ü–æ—ç—Ç–æ–º—É –º—ã –¥—É–±–ª–∏—Ä—É–µ–º –µ–≥–æ –ª–æ–≥–∏–∫—É, –Ω–æ –¥–ª—è callback.
    await callback.answer()
    orders = await get_user_orders(session, client_tg_id=callback.from_user.id)
    active_orders = [o for o in orders if o.status in (OrderStatus.new, OrderStatus.accepted, OrderStatus.in_progress)]

    if not active_orders:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üóÇ –ê—Ä—Ö–∏–≤ –∑–∞–∫–∞–∑–æ–≤", callback_data="view_archive")]
            ])
        )
        return

    await callback.message.edit_text(
        "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:",
        reply_markup=get_active_orders_keyboard(active_orders)
    )


@router.callback_query(F.data == "view_archive")
async def view_archive(callback: types.CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞—Ä—Ö–∏–≤ –∑–∞–∫–∞–∑–æ–≤."""
    await callback.answer()
    orders = await get_user_orders(session, client_tg_id=callback.from_user.id)
    completed_orders = [o for o in orders if o.status in (OrderStatus.completed, OrderStatus.cancelled)]

    if not completed_orders:
        await callback.message.edit_text(
            "–í–∞—à –∞—Ä—Ö–∏–≤ –ø—É—Å—Ç.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_orders_list")]
            ])
        )
        return

    await callback.message.edit_text(
        "–ê—Ä—Ö–∏–≤ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤:",
        reply_markup=get_archive_orders_keyboard(completed_orders)
    )

@router.callback_query(F.data.startswith("view_archive_order:"))
async def view_archive_order(callback: types.CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∞—Ä—Ö–∏–≤–Ω–æ–º –∑–∞–∫–∞–∑–µ."""
    order_id = int(callback.data.split(":")[1])
    order = await get_order_by_id(session, order_id)

    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ view_order)
    selected_services_text = "\n".join(
        [f"    - {ADDITIONAL_SERVICES[item.service_key]}" for item in order.items]
    ) or "–ù–µ—Ç"
    try:
        selected_date = datetime.datetime.strptime(order.selected_date, "%Y-%m-%d")
        formatted_date = f"{selected_date.day} {RUSSIAN_MONTHS_GENITIVE[selected_date.month]} {selected_date.year}"
    except (ValueError, KeyError, TypeError):
        formatted_date = order.selected_date

    order_details = (
        f"<b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id} (–ê—Ä—Ö–∏–≤)</b>\n\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> <i>{STATUS_MAPPING.get(order.status, order.status.value)}</i>\n"
    f"<b>–¢–∏–ø —É–±–æ—Ä–∫–∏:</b> {order.cleaning_type}\n"

    f"<b>–ö–æ–º–Ω–∞—Ç:</b> {order.room_count}, <b>–°–∞–Ω—É–∑–ª–æ–≤:</b> {order.bathroom_count}\n\n"

    f"<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n{selected_services_text}\n\n"

    f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.address_text}\n"

    f"üìÖ <b>–î–∞—Ç–∞:</b> {formatted_date}\n"

    f"üïí <b>–í—Ä–µ–º—è:</b> {order.selected_time}\n\n"

    f"üí∞ <b>–ò–¢–û–ì–û–í–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {order.total_price} ‚ÇΩ</b>"
    )

    await callback.message.edit_text(
        order_details,
        reply_markup=get_view_archive_order_keyboard(order_id)
    )
    await callback.answer()

@router.callback_query(OrderStates.editing_order, F.data == "edit_datetime")
async def edit_order_datetime(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞."""
    await callback.message.delete()
    now = datetime.datetime.now()
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞:",
        reply_markup=await create_calendar(now.year, now.month)
    )
    # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–µ–π—Ç –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    await state.set_state(OrderStates.choosing_date)
    await callback.answer()

@router.callback_query(OrderStates.editing_order, F.data == "back_to_my_orders")
async def back_to_orders_from_edit(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    await state.clear()
    await callback.message.delete()
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–∫–∞–∑—ã
    await my_orders(callback.message, session, state)
    await callback.answer()

@router.callback_query(OrderStates.editing_order, F.data == "edit_services")
async def edit_order_services_start(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–ø. —É—Å–ª—É–≥ –¥–ª—è –∑–∞–∫–∞–∑–∞."""
    user_data = await state.get_data()
    order_id = user_data.get("order_id_to_edit")

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –∏–∑ –ë–î
    order = await get_order_by_id(session, order_id)
    if not order:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (–±–µ–∑ –¥–æ–ø. —É—Å–ª—É–≥)
    preliminary_cost = calculate_preliminary_cost(
        cleaning_type=order.cleaning_type,
        room_count_str=order.room_count,
        bathroom_count_str=order.bathroom_count
    )

    # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
    selected_services = {item.service_key: item.quantity for item in order.items}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å
    await state.update_data(preliminary_cost=preliminary_cost, selected_services=selected_services)

    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {order.total_price} ‚ÇΩ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ —Å–Ω–∏–º–∏—Ç–µ –≤—ã–±–æ—Ä —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥:",
        reply_markup=get_additional_services_keyboard(selected_services)
    )

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –Ω–æ–≤—ã–π —Å—Ç–µ–π—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥
    await state.set_state(OrderStates.editing_additional_services)
    await callback.answer()

@router.callback_query(OrderStates.editing_order, F.data == "edit_address")
async def edit_address_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞."""
    await callback.message.delete()
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.",
        reply_markup=get_address_keyboard()
    )
    # –ú—ã –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
    await state.set_state(OrderStates.entering_address)
    await callback.answer()

@router.callback_query(OrderStates.editing_order, F.data == "edit_rooms")
async def edit_rooms_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç."""
    await callback.message.delete()
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:",
        reply_markup=get_room_count_keyboard()
    )
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –Ω–æ–≤—ã–π —Å—Ç–µ–π—Ç
    await state.set_state(OrderStates.editing_room_count)
    await callback.answer()

@router.message(
    OrderStates.editing_room_count,
    F.text.in_({"1", "2", "3", "4", "5+"})
)
async def edit_room_count_chosen(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —Å–∞–Ω—É–∑–ª–∞—Ö."""
    await state.update_data(new_room_count=message.text)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–Ω—É–∑–ª–æ–≤:",
        reply_markup=get_bathroom_count_keyboard()
    )
    await state.set_state(OrderStates.editing_bathroom_count)


@router.message(
    OrderStates.editing_bathroom_count,
    F.text.in_({"1", "2", "3+"})
)
async def edit_bathroom_count_chosen(message: types.Message, state: FSMContext, session: AsyncSession, bots: dict, config: Settings):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∞–Ω—É–∑–ª—ã, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑."""
    await state.update_data(new_bathroom_count=message.text)
    user_data = await state.get_data()
    order_id = user_data.get("order_id_to_edit")
    order = await get_order_by_id(session, order_id)

    if not order:
        await message.answer("–û—à–∏–±–∫–∞, –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu_keyboard())
        await state.clear()
        return

    new_preliminary_cost = calculate_preliminary_cost(
        cleaning_type=order.cleaning_type,
        room_count_str=user_data.get("new_room_count"),
        bathroom_count_str=user_data.get("new_bathroom_count")
    )
    additional_cost = sum(ADDITIONAL_SERVICE_PRICES.get(item.service_key, 0) * item.quantity for item in order.items)
    new_total_price = new_preliminary_cost + additional_cost
    updated_order = await update_order_rooms_and_price(
        session, order_id=order_id,
        new_room_count=user_data.get("new_room_count"), new_bathroom_count=user_data.get("new_bathroom_count"),
        new_total_price=new_total_price
    )

    if updated_order:
        await bots["admin"].send_message(
            config.admin_id,
            f"‚ùóÔ∏è <b>–í –∑–∞–∫–∞–∑–µ ‚Ññ{order_id} –∏–∑–º–µ–Ω–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.</b>\n"
            f"<b>–ö–æ–º–Ω–∞—Ç:</b> {updated_order.room_count}, <b>–°–∞–Ω—É–∑–ª–æ–≤:</b> {updated_order.bathroom_count}\n"
            f"<b>–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {updated_order.total_price} ‚ÇΩ"
        )

        if updated_order.executor_tg_id:
            order_pending = await update_order_status(session, order_id, OrderStatus.pending_confirmation)
            if order_pending:
                await message.answer(
                    f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ú—ã —É–≤–µ–¥–æ–º–∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –æ–∂–∏–¥–∞–µ–º –µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                    reply_markup=get_main_menu_keyboard()
                )
                try:
                    new_executor_payment = round(new_total_price * 0.85)
                    await bots["executor"].send_message(
                        chat_id=updated_order.executor_tg_id,
                        text=(
                            f"‚ùóÔ∏è <b>–í –∑–∞–∫–∞–∑–µ ‚Ññ{order_id} –∏–∑–º–µ–Ω–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.</b>\n"
                            f"–ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {updated_order.room_count} –∫–æ–º–Ω–∞—Ç, {updated_order.bathroom_count} —Å–∞–Ω—É–∑–ª–æ–≤\n"
                            f"–ù–æ–≤–∞—è –≤—ã–ø–ª–∞—Ç–∞: {new_executor_payment} ‚ÇΩ\n\n"
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –≥–æ—Ç–æ–≤—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑ —Å —ç—Ç–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏."
                        ),
                        reply_markup=get_order_changes_confirmation_keyboard(order_id)
                    )
                except Exception as e:
                    logging.error(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –∏–∑–º–µ–Ω–µ–Ω, –Ω–æ –ù–ï —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
                    await bots["admin"].send_message(
                        config.admin_id,
                        f"‚ö†Ô∏è <b>–í –∑–∞–∫–∞–∑–µ ‚Ññ{order_id} –∏–∑–º–µ–Ω–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.</b>\n"
                        f"<b>–ù–û –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.</b> –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º –≤—Ä—É—á–Ω—É—é."
                    )
            else:
                logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –Ω–∞ pending_confirmation.")
        else:
            await message.answer(
                f"‚úÖ <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
                f"<b>–ö–æ–º–Ω–∞—Ç:</b> {updated_order.room_count}, <b>–°–∞–Ω—É–∑–ª–æ–≤:</b> {updated_order.bathroom_count}\n"
                f"üí∞ <b>–ù–æ–≤–∞—è –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {updated_order.total_price} ‚ÇΩ</b>",
                reply_markup=get_main_menu_keyboard()
            )
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.", reply_markup=get_main_menu_keyboard())
    await state.clear()

@router.callback_query(F.data.startswith("cancel_order:"))
async def cancel_order(callback: types.CallbackQuery, session: AsyncSession, bots: dict, config: Settings):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞."""
    order_id = int(callback.data.split(":")[1])

    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    updated_order = await update_order_status(session, order_id, OrderStatus.cancelled)

    if updated_order:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫—É
        await callback.message.edit_text(
            f"<b>–ó–∞–∫–∞–∑ ‚Ññ{updated_order.id} –æ—Ç {updated_order.created_at.strftime('%d.%m.%Y')}</b>\n"
            f"–°—Ç–∞—Ç—É—Å: <i>{STATUS_MAPPING.get(updated_order.status, updated_order.status.value)}</i>\n"
            f"–°—É–º–º–∞: {updated_order.total_price} ‚ÇΩ\n"
            f"–ê–¥—Ä–µ—Å: {updated_order.address_text}"
        )
        await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await bots["admin"].send_message(
            chat_id=config.admin_id,
            text=f"‚ùóÔ∏è <b>–ö–ª–∏–µ–Ω—Ç @{callback.from_user.username or callback.from_user.full_name} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ ‚Ññ{order_id}.</b>"
        )
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑.", show_alert=True)


@router.callback_query(F.data.startswith("repeat_order:"))
async def repeat_order(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä –∑–∞–∫–∞–∑–∞, –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –¥–æ–ø. —É—Å–ª—É–≥.
    """
    await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ—à–ª–æ–≥–æ –∑–∞–∫–∞–∑–∞...")
    order_id = int(callback.data.split(":")[1])

    old_order = await get_order_by_id(session, order_id)
    if not old_order:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—à–ª–æ–º –∑–∞–∫–∞–∑–µ.", show_alert=True)
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞
    preliminary_cost = calculate_preliminary_cost(
        cleaning_type=old_order.cleaning_type,
        room_count_str=old_order.room_count,
        bathroom_count_str=old_order.bathroom_count
    )

    # –°–æ–±–∏—Ä–∞–µ–º –¥–æ–ø. —É—Å–ª—É–≥–∏ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞
    selected_services = {item.service_key: item.quantity for item in old_order.items}

    # "–ö–ª–æ–Ω–∏—Ä—É–µ–º" –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_data({
        "cleaning_type": old_order.cleaning_type,
        "room_count": old_order.room_count,
        "bathroom_count": old_order.bathroom_count,
        "selected_services": selected_services,
        "address_text": old_order.address_text,
        "address_lat": old_order.address_lat,
        "address_lon": old_order.address_lon,
        "order_name": old_order.order_name,
        "order_phone": old_order.order_phone,
        "preliminary_cost": preliminary_cost,
        # –°—Ä–∞–∑—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        "total_cost": calculate_total_cost(preliminary_cost, selected_services)
    })

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    await callback.message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –¥–æ–ø. —É—Å–ª—É–≥–∏
    await callback.message.answer(
        f"–î–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–±–æ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥.",
        reply_markup=get_additional_services_keyboard(selected_services)
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —à–∞–≥ –≤—ã–±–æ—Ä–∞ –¥–æ–ø. —É—Å–ª—É–≥, –∫–∞–∫ –≤ –æ–±—ã—á–Ω–æ–º –∑–∞–∫–∞–∑–µ
    await state.set_state(OrderStates.choosing_additional_services)

@router.message(F.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏."""
    await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –¥—Ä—É–≥–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
    await message.answer(
        "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ß–µ–º –º—ã –º–æ–∂–µ–º –ø–æ–º–æ—á—å?",
        reply_markup=get_support_menu_keyboard()
    )


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è —É—Å–ª—É–≥, —Ç—Ä–µ–±—É—é—â–∏—Ö —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
QUANTITY_SERVICES = {"win", "chair"}


@router.callback_query(
    StateFilter(OrderStates.choosing_additional_services, OrderStates.editing_additional_services),
    F.data.startswith("add_service_")
)
async def handle_add_service(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–æ–ø. —É—Å–ª—É–≥–∏: –ª–∏–±–æ –≤–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç, –ª–∏–±–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ."""
    service_key = callback.data.split("_")[-1]
    user_data = await state.get_data()
    selected_services = user_data.get("selected_services", {}).copy()

    # --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ ---
    if service_key in QUANTITY_SERVICES:
        # –ï—Å–ª–∏ —É—Å–ª—É–≥–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞, —É–¥–∞–ª—è–µ–º –µ–µ
        if service_key in selected_services:
            del selected_services[service_key]
            await state.update_data(selected_services=selected_services)
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await update_services_message(
                bot=callback.bot,
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                state=state
            )
        else:
            # –ï—Å–ª–∏ —É—Å–ª—É–≥–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            await state.update_data(
                current_service_for_quantity=service_key,
                services_message_id=callback.message.message_id  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            )
            prompt_message = await callback.message.answer(
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ({ADDITIONAL_SERVICES[service_key].split('(')[0].strip()}):"
            )
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –µ–≥–æ —É–¥–∞–ª–∏—Ç—å
            await state.update_data(quantity_prompt_message_id=prompt_message.message_id)
            await state.set_state(OrderStates.entering_service_quantity)
        await callback.answer()
        return

    if service_key in selected_services:
        del selected_services[service_key]
    else:
        selected_services[service_key] = 1  # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —É—Å–ª—É–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ–≥–¥–∞ 1

    await state.update_data(selected_services=selected_services)
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await update_services_message(
        bot=callback.bot,
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        state=state
    )
    await callback.answer()


@router.message(OrderStates.entering_service_quantity, F.text.isdigit())
async def handle_service_quantity(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —É—Å–ª—É–≥–∏."""
    quantity = int(message.text)
    if not (1 <= quantity <= 10):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
        return

    user_data = await state.get_data()
    service_key = user_data.get("current_service_for_quantity")
    selected_services = user_data.get("selected_services", {}).copy()
    services_message_id = user_data.get("services_message_id")
    quantity_prompt_message_id = user_data.get("quantity_prompt_message_id")

    selected_services[service_key] = quantity
    await state.update_data(selected_services=selected_services)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥
    current_state_str = await state.get_state()
    if "editing" in current_state_str:
        await state.set_state(OrderStates.editing_additional_services)
    else:
        await state.set_state(OrderStates.choosing_additional_services)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        if services_message_id:
            await update_services_message(
                bot=message.bot,
                chat_id=message.chat.id,
                message_id=services_message_id,
                state=state
            )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–≤–æ–ø—Ä–æ—Å –æ—Ç –±–æ—Ç–∞
    if quantity_prompt_message_id:
        with suppress(TelegramBadRequest):
            await message.bot.delete_message(message.chat.id, quantity_prompt_message_id)
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with suppress(TelegramBadRequest):
        await message.delete()


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ----
async def update_services_message(bot: Bot, chat_id: int, message_id: int, state: FSMContext):
    """–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–ø. —É—Å–ª—É–≥–∞–º–∏."""
    user_data = await state.get_data()
    selected_services = user_data.get("selected_services", {})
    preliminary_cost = user_data.get("preliminary_cost", 0)

    additional_cost = 0
    for service, quantity in selected_services.items():
        additional_cost += ADDITIONAL_SERVICE_PRICES.get(service, 0) * quantity

    total_cost = preliminary_cost + additional_cost
    await state.update_data(total_cost=total_cost)

    with suppress(TelegramBadRequest):
        await bot.edit_message_text(
            text=f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–±–æ—Ä–∫–∏: <b>{total_cost} ‚ÇΩ</b>.\n\n"
                 f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=get_additional_services_keyboard(selected_services)
        )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤ –±—É–¥—É—â–µ–º
    await state.update_data(services_message_id=message_id)


@router.callback_query(
    StateFilter(OrderStates.choosing_additional_services, OrderStates.editing_additional_services),
    F.data == "done_services"
)
async def done_additional_services(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession, bots: dict,
                                   config: Settings):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—ã–±–æ—Ä –¥–æ–ø. —É—Å–ª—É–≥: –ª–∏–±–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è, –ª–∏–±–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤–≤–æ–¥—É –∞–¥—Ä–µ—Å–∞."""
    user_data = await state.get_data()
    order_id = user_data.get("order_id_to_edit")

    if "total_cost" not in user_data:
        await state.update_data(total_cost=user_data.get("preliminary_cost"))
        user_data = await state.get_data()

    if order_id:
        new_services = user_data.get("selected_services", {})
        new_price = user_data.get("total_cost")
        updated_order = await update_order_services_and_price(session, order_id, new_services, new_price)

        if updated_order:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            await bots["admin"].send_message(
                config.admin_id,
                f"‚ùóÔ∏è <b>–í –∑–∞–∫–∞–∑–µ ‚Ññ{order_id} –∏–∑–º–µ–Ω–µ–Ω—ã –¥–æ–ø. —É—Å–ª—É–≥–∏.</b>\n–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {new_price} ‚ÇΩ"
            )

            # –ï—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω
            if updated_order.executor_tg_id:
                order_pending = await update_order_status(session, order_id, OrderStatus.pending_confirmation)
                if order_pending:
                    # –°–æ–æ–±—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É, —á—Ç–æ –∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    await callback.message.edit_text(
                        f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–æ–ø. —É—Å–ª—É–≥–∞—Ö –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n"
                        f"–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{new_price} ‚ÇΩ</b>.\n\n"
                        "–ú—ã —É–≤–µ–¥–æ–º–∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –æ–∂–∏–¥–∞–µ–º –µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
                    )
                    await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu_keyboard())
                    try:
                        new_executor_payment = round(new_price * 0.85)
                        await bots["executor"].send_message(
                            chat_id=updated_order.executor_tg_id,
                            text=(
                                f"‚ùóÔ∏è <b>–í –∑–∞–∫–∞–∑–µ ‚Ññ{order_id} –∏–∑–º–µ–Ω–µ–Ω—ã –¥–æ–ø. —É—Å–ª—É–≥–∏.</b>\n"
                                f"–ù–æ–≤–∞—è –≤—ã–ø–ª–∞—Ç–∞: {new_executor_payment} ‚ÇΩ\n\n"
                                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –≥–æ—Ç–æ–≤—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑ —Å —ç—Ç–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏."
                            ),
                            reply_markup=get_order_changes_confirmation_keyboard(order_id)
                        )
                    except Exception as e:
                        logging.error(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –∏–∑–º–µ–Ω–µ–Ω, –Ω–æ –ù–ï —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
                        await bots["admin"].send_message(
                            config.admin_id,
                            f"‚ö†Ô∏è <b>–í –∑–∞–∫–∞–∑–µ ‚Ññ{order_id} –∏–∑–º–µ–Ω–µ–Ω—ã –¥–æ–ø. —É—Å–ª—É–≥–∏.</b>\n"
                            f"<b>–ù–û –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.</b> –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º –≤—Ä—É—á–Ω—É—é."
                        )
                else:
                    logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –Ω–∞ pending_confirmation.")
            # –ï—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–µ –±—ã–ª–æ
            else:
                await callback.message.edit_text(
                    f"–û—Ç–ª–∏—á–Ω–æ! –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.\n"
                    f"–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{new_price} ‚ÇΩ</b>"
                )
                await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu_keyboard())
        else:
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.", show_alert=True)
        await state.clear()
    else:
        await callback.message.delete()
        await callback.message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.",
            reply_markup=get_address_keyboard()
        )
        await state.set_state(OrderStates.entering_address)
    await callback.answer()

@router.message(OrderStates.entering_address, F.location)
async def handle_address_location(message: types.Message, state: FSMContext, config: Settings):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –ø–æ–ª—É—á–∞–µ—Ç –∞–¥—Ä–µ—Å –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    lat, lon = message.location.latitude, message.location.longitude
    address_text = await get_address_from_coords(lat, lon, config.api_keys.yandex_api_key)

    if address_text:
        await state.update_data(address_lat=lat, address_lon=lon, address_text=address_text)
        await message.answer(
            f"–í–∞—à –∞–¥—Ä–µ—Å: <b>{address_text}</b>.\n–í—Å–µ –≤–µ—Ä–Ω–æ?",
            reply_markup=get_address_confirmation_keyboard()
        )
        await state.set_state(OrderStates.confirming_address)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.")


@router.message(OrderStates.entering_address, F.text)
async def handle_address_text(message: types.Message, state: FSMContext, config: Settings):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–æ–ø. —É—Å–ª—É–≥–∞–º":
        await back_to_additional_services(message, state)
        return

    validated_address = await get_address_from_text(message.text, config.api_keys.yandex_api_key)
    if validated_address:
        await state.update_data(address_text=validated_address)
        await message.answer(
            f"–ú—ã —É—Ç–æ—á–Ω–∏–ª–∏ –≤–∞—à –∞–¥—Ä–µ—Å: <b>{validated_address}</b>.\n–í—Å–µ –≤–µ—Ä–Ω–æ?",
            reply_markup=get_address_confirmation_keyboard()
        )
        await state.set_state(OrderStates.confirming_address)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.")


@router.message(OrderStates.confirming_address, F.text == "‚úÖ –î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ")
async def handle_address_confirmation(message: types.Message, state: FSMContext, session: AsyncSession, bots: dict, config: Settings):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞: –ª–∏–±–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑, –ª–∏–±–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ."""
    user_data = await state.get_data()
    order_id = user_data.get("order_id_to_edit")

    if order_id:
        new_address = user_data.get("address_text")
        new_lat = user_data.get("address_lat")
        new_lon = user_data.get("address_lon")
        updated_order = await update_order_address(session, order_id, new_address, new_lat, new_lon)

        if updated_order:
            await bots["admin"].send_message(
                config.admin_id,
                f"‚ùóÔ∏è <b>–í –∑–∞–∫–∞–∑–µ ‚Ññ{order_id} –∏–∑–º–µ–Ω–µ–Ω –∞–¥—Ä–µ—Å.</b>\n–ù–æ–≤—ã–π –∞–¥—Ä–µ—Å: {new_address}"
            )

            if updated_order.executor_tg_id:
                order_pending = await update_order_status(session, order_id, OrderStatus.pending_confirmation)
                if order_pending:
                    await message.answer(
                        f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ú—ã —É–≤–µ–¥–æ–º–∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –æ–∂–∏–¥–∞–µ–º –µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                        reply_markup=get_main_menu_keyboard()
                    )
                    try:
                        await bots["executor"].send_message(
                            chat_id=updated_order.executor_tg_id,
                            text=(
                                f"‚ùóÔ∏è <b>–í –∑–∞–∫–∞–∑–µ ‚Ññ{order_id} –∏–∑–º–µ–Ω–µ–Ω –∞–¥—Ä–µ—Å.</b>\n"
                                f"–ù–æ–≤—ã–π –∞–¥—Ä–µ—Å: {new_address}\n\n"
                                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –≥–æ—Ç–æ–≤—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑ —Å —ç—Ç–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏."
                            ),
                            reply_markup=get_order_changes_confirmation_keyboard(order_id)
                        )
                    except Exception as e:
                        logging.error(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –∏–∑–º–µ–Ω–µ–Ω, –Ω–æ –ù–ï —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
                        await bots["admin"].send_message(
                            config.admin_id,
                            f"‚ö†Ô∏è <b>–í –∑–∞–∫–∞–∑–µ ‚Ññ{order_id} –∏–∑–º–µ–Ω–µ–Ω –∞–¥—Ä–µ—Å.</b>\n"
                            f"<b>–ù–û –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.</b> –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º –≤—Ä—É—á–Ω—É—é."
                        )
                else:
                    logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –Ω–∞ pending_confirmation.")
            else:
                await message.answer(
                    f"–û—Ç–ª–∏—á–Ω–æ! –ê–¥—Ä–µ—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.",
                    reply_markup=get_main_menu_keyboard()
                )
        else:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.", reply_markup=get_main_menu_keyboard())
        await state.clear()
    else:
        now = datetime.datetime.now()
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É:",
            reply_markup=await create_calendar(now.year, now.month)
        )
        await state.set_state(OrderStates.choosing_date)


@router.message(OrderStates.confirming_address, F.text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")
async def handle_reenter_address(message: types.Message, state: FSMContext):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –∑–∞–Ω–æ–≤–æ."""
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º (–ì–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º):",
        reply_markup=types.ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    )
    await state.set_state(OrderStates.entering_address)


# --- –ë–õ–û–ö: –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–ê–õ–ï–ù–î–ê–†–Ø ---
@router.callback_query(OrderStates.choosing_date, F.data.startswith("month_nav:"))
async def process_calendar_navigation(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é '–≤–ø–µ—Ä–µ–¥'/'–Ω–∞–∑–∞–¥' –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é."""
    user_id = callback.from_user.id
    username = callback.from_user.username or "unknown"
    try:
        _, direction, year_str, month_str = callback.data.split(":")
        year, month = int(year_str), int(month_str)

        if direction == "next":
            month += 1
            if month > 12:
                month = 1
                year += 1
        elif direction == "prev":
            month -= 1
            if month < 1:
                month = 12
                year -= 1
        with suppress(TelegramBadRequest):
            await callback.message.edit_reply_markup(
                reply_markup=await create_calendar(year, month)
            )
    except Exception as e:
        logging.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é: {e}",
            extra={"username": username, "user_id": user_id}
        )
    finally:
        await callback.answer()


@router.callback_query(OrderStates.choosing_date, F.data == "back_to_address")
async def back_to_address_step(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞."""
    await callback.message.delete()
    await callback.message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤–≤–æ–¥—É –∞–¥—Ä–µ—Å–∞. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.",
        reply_markup=get_address_keyboard()
    )
    await state.set_state(OrderStates.entering_address)
    await callback.answer()


@router.callback_query(OrderStates.choosing_date, F.data.startswith("day:"))
async def process_date_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏."""
    date_str = callback.data.split(":")[1]
    await state.update_data(selected_date=date_str)

    now_tyumen = datetime.datetime.now(TYUMEN_TZ)
    today_tyumen_str = now_tyumen.strftime("%Y-%m-%d")

    available_slots = ALL_TIME_SLOTS
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å, —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ—Ç—ã
    if date_str == today_tyumen_str:
        current_hour = now_tyumen.hour
        available_slots = [
            slot for slot in ALL_TIME_SLOTS if int(slot.split(':')[0]) > current_hour
        ]

    # –ï—Å–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å–ª–æ—Ç–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
    if not available_slots:
        await callback.answer("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.", show_alert=True)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        now = datetime.datetime.now()
        await callback.message.edit_reply_markup(reply_markup=await create_calendar(now.year, now.month))
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
    try:
        selected_date = datetime.datetime.strptime(date_str, "%Y-%m-%d")
        formatted_date = f"{selected_date.day} {RUSSIAN_MONTHS_GENITIVE[selected_date.month]} {selected_date.year}"
    except (ValueError, KeyError):
        formatted_date = date_str

    await callback.message.delete()
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {formatted_date}.\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:",
        reply_markup=get_time_keyboard(available_slots)
    )
    await state.set_state(OrderStates.choosing_time)
    await callback.answer()

@router.message(OrderStates.choosing_time, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã")
async def back_to_date_selection(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã (–∫–∞–ª–µ–Ω–¥–∞—Ä—é)."""
    now = datetime.datetime.now()
    # –£–±–∏—Ä–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º inline
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã.", reply_markup=types.ReplyKeyboardRemove())
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É:",
        reply_markup=await create_calendar(now.year, now.month)
    )
    await state.set_state(OrderStates.choosing_date)


@router.message(OrderStates.choosing_time, F.text)
async def handle_time_selection(message: types.Message, state: FSMContext, session: AsyncSession, bots: dict,
                                config: Settings):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏. –õ–∏–±–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –ª–∏–±–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π."""
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã":
        await back_to_date_selection(message, state)
        return

    await state.update_data(selected_time=message.text)
    user_data = await state.get_data()
    order_id = user_data.get("order_id_to_edit")

    if order_id:
        new_date = user_data.get("selected_date")
        new_time = user_data.get("selected_time")
        updated_order = await update_order_datetime(session, order_id, new_date, new_time)

        if updated_order:
            try:
                selected_date = datetime.datetime.strptime(new_date, "%Y-%m-%d")
                formatted_date = f"{selected_date.day} {RUSSIAN_MONTHS_GENITIVE[selected_date.month]} {selected_date.year}"
            except (ValueError, KeyError, TypeError):
                formatted_date = new_date

            await bots["admin"].send_message(
                config.admin_id,
                f"‚ùóÔ∏è <b>–í –∑–∞–∫–∞–∑–µ ‚Ññ{order_id} –∏–∑–º–µ–Ω–µ–Ω–∞ –¥–∞—Ç–∞/–≤—Ä–µ–º—è.</b>\n"
                f"–ù–æ–≤–∞—è –¥–∞—Ç–∞: {formatted_date}\n–ù–æ–≤–æ–µ –≤—Ä–µ–º—è: {new_time}"
            )

            if updated_order.executor_tg_id:
                order_pending = await update_order_status(session, order_id, OrderStatus.pending_confirmation)
                if order_pending:
                    await message.answer(
                        f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ú—ã —É–≤–µ–¥–æ–º–∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –æ–∂–∏–¥–∞–µ–º –µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                        reply_markup=get_main_menu_keyboard()
                    )
                    try:
                        await bots["executor"].send_message(
                            chat_id=updated_order.executor_tg_id,
                            text=(
                                f"‚ùóÔ∏è <b>–í –∑–∞–∫–∞–∑–µ ‚Ññ{order_id} –∏–∑–º–µ–Ω–µ–Ω–∞ –¥–∞—Ç–∞/–≤—Ä–µ–º—è.</b>\n"
                                f"–ù–æ–≤–∞—è –¥–∞—Ç–∞: {formatted_date}\n–ù–æ–≤–æ–µ –≤—Ä–µ–º—è: {new_time}\n\n"
                                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –≥–æ—Ç–æ–≤—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑ —Å —ç—Ç–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏."
                            ),
                            reply_markup=get_order_changes_confirmation_keyboard(order_id)
                        )
                    except Exception as e:
                        logging.error(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –∏–∑–º–µ–Ω–µ–Ω, –Ω–æ –ù–ï —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
                        await bots["admin"].send_message(
                            config.admin_id,
                            f"‚ö†Ô∏è <b>–í –∑–∞–∫–∞–∑–µ ‚Ññ{order_id} –∏–∑–º–µ–Ω–µ–Ω–∞ –¥–∞—Ç–∞/–≤—Ä–µ–º—è.</b>\n"
                            f"<b>–ù–û –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.</b> –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º –≤—Ä—É—á–Ω—É—é."
                        )
                else:
                    logging.error(
                        f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –Ω–∞ pending_confirmation.")
            else:
                await message.answer(
                    f"–û—Ç–ª–∏—á–Ω–æ! –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã.",
                    reply_markup=get_main_menu_keyboard()
                )
        else:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=get_main_menu_keyboard())
        await state.clear()
    else:
        await message.answer(
            "–í—Ä–µ–º—è –≤—ã–±—Ä–∞–Ω–æ. –ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
            reply_markup=get_photo_keyboard()
        )
        await state.set_state(OrderStates.waiting_for_photo)

# --- –ë–õ–û–ö: –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –®–ê–ì–ê –° –§–û–¢–û ---

@router.message(OrderStates.waiting_for_photo, F.photo)
async def handle_photo(message: types.Message, state: FSMContext):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–æ—Ç–æ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM."""
    user_data = await state.get_data()
    photo_ids = user_data.get("photo_ids", [])

    if len(photo_ids) >= 10:
        await message.answer("–í—ã —É–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (10). –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'.")
        return

    photo_ids.append(message.photo[-1].file_id)
    await state.update_data(photo_ids=photo_ids)
    await message.answer(f"–§–æ—Ç–æ {len(photo_ids)}/10 –¥–æ–±–∞–≤–ª–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'.")


@router.message(OrderStates.waiting_for_photo, F.text.in_({"‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"}))
async def continue_after_photo(message: types.Message, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏."""
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –∑–∞–∫–∞–∑–∞.",
        reply_markup=get_order_name_keyboard()
    )
    await state.set_state(OrderStates.entering_order_name)


async def back_to_time_selection(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏."""
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏. –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:",
        reply_markup=get_time_keyboard(ALL_TIME_SLOTS)
    )
    await state.set_state(OrderStates.choosing_time)


# --- –ù–û–í–´–ô –ë–õ–û–ö: –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ù–¢–ê–ö–¢–ù–´–• –î–ê–ù–ù–´–• ---

@router.message(OrderStates.entering_order_name, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–æ—Ç–æ")
async def back_to_photo_step(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —à–∞–≥—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ."""
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ —à–∞–≥—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ. –ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        reply_markup=get_photo_keyboard()
    )
    await state.set_state(OrderStates.waiting_for_photo)

async def _show_order_summary(message: types.Message, state: FSMContext):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ –ø–æ –∑–∞–∫–∞–∑—É."""
    user_data = await state.get_data()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    date_str = user_data.get('selected_date')
    try:
        selected_date = datetime.datetime.strptime(date_str, "%Y-%m-%d")
        formatted_date = f"{selected_date.day} {RUSSIAN_MONTHS_GENITIVE[selected_date.month]} {selected_date.year}"
    except (ValueError, KeyError, TypeError):
        formatted_date = date_str

    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–ø. —É—Å–ª—É–≥–∞—Ö
    selected_services_data = user_data.get("selected_services", {})
    selected_services_text = "\n".join(
        [f"    - {ADDITIONAL_SERVICES[key]}" for key in selected_services_data.keys()]
    ) or "–ù–µ—Ç"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    summary_text = (
        f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:</b>\n\n"
        f"<b>–¢–∏–ø —É–±–æ—Ä–∫–∏:</b> {user_data.get('cleaning_type')}\n"
        f"<b>–ö–æ–º–Ω–∞—Ç:</b> {user_data.get('room_count')}, <b>–°–∞–Ω—É–∑–ª–æ–≤:</b> {user_data.get('bathroom_count')}\n\n"
        f"<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n{selected_services_text}\n\n"
        f"üìç <b>–ê–¥—Ä–µ—Å:</b> {user_data.get('address_text', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {formatted_date}\n"
        f"üïí <b>–í—Ä–µ–º—è:</b> {user_data.get('selected_time')}\n\n"
        f"üë§ <b>–ò–º—è:</b> {user_data.get('order_name')}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_data.get('order_phone')}\n\n"
        f"üí∞ <b>–ò–¢–û–ì–û–í–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {user_data.get('total_cost')} ‚ÇΩ</b>"
    )

    await message.answer(text=summary_text, reply_markup=get_confirmation_keyboard())
    await state.set_state(OrderStates.confirming_order)

@router.message(OrderStates.entering_order_name, F.text)
async def handle_order_name(message: types.Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–º—è. –ï—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —É–∂–µ –µ—Å—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É, –∏–Ω–∞—á–µ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω."""
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–æ—Ç–æ":
        await back_to_photo_step(message, state)
        return

    await state.update_data(order_name=message.text)
    user = await get_user(session, message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –ë–ê–ó–ï –î–ê–ù–ù–´–•
    if user and user.phone:
        await state.update_data(order_phone=user.phone)
        # –ï—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –µ—Å—Ç—å, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–≤–æ–¥–∫–µ
        await _show_order_summary(message, state)
    else:
        # –ò–Ω–∞—á–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        await message.answer(
            f"–û—Ç–ª–∏—á–Ω–æ, {message.text}. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.",
            reply_markup=get_order_phone_keyboard()
        )
        await state.set_state(OrderStates.entering_order_phone)

@router.message(OrderStates.confirming_order, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
async def back_to_phone_step(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤–≤–æ–¥—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.",
        reply_markup=get_order_phone_keyboard()
    )
    await state.set_state(OrderStates.entering_order_phone)

@router.message(OrderStates.entering_order_phone, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–º–µ–Ω–∏")
async def back_to_name_step(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏."""
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –∑–∞–∫–∞–∑–∞:",
        reply_markup=get_order_name_keyboard()
    )
    await state.set_state(OrderStates.entering_order_name)

@router.message(OrderStates.entering_order_phone, (F.contact | F.text))
async def handle_order_phone(message: types.Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –ë–î –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É."""
    phone_number = message.contact.phone_number if message.contact else message.text

    # –î–æ–±–∞–≤–∏–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if "–Ω–∞–∑–∞–¥" in phone_number.lower():
        await back_to_name_step(message, state)
        return

    await state.update_data(order_phone=phone_number)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤
    await update_user_phone(session, message.from_user.id, phone_number)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
    await _show_order_summary(message, state)


@router.message(OrderStates.confirming_order, F.text == "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def handle_confirmation(message: types.Message, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã."""
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=get_payment_keyboard()
    )
    await state.set_state(OrderStates.choosing_payment_method)


@router.callback_query(F.data.startswith("cancel_order:"))
async def cancel_order(callback: types.CallbackQuery, session: AsyncSession, bots: dict, config: Settings):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞."""
    order_id = int(callback.data.split(":")[1])

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, –±—ã–ª –ª–∏ —É –Ω–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
    order_to_cancel = await get_order_by_id(session, order_id)
    if not order_to_cancel:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑.", show_alert=True)
        return

    executor_id_to_notify = order_to_cancel.executor_tg_id

    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    updated_order = await update_order_status(session, order_id, OrderStatus.cancelled)

    if updated_order:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫—É
        await callback.message.edit_text(
            f"<b>–ó–∞–∫–∞–∑ ‚Ññ{updated_order.id} –æ—Ç {updated_order.created_at.strftime('%d.%m.%Y')}</b>\n"
            f"–°—Ç–∞—Ç—É—Å: <i>{STATUS_MAPPING.get(updated_order.status, updated_order.status.value)}</i>\n"
            f"–°—É–º–º–∞: {updated_order.total_price} ‚ÇΩ\n"
            f"–ê–¥—Ä–µ—Å: {updated_order.address_text}"
        )
        await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        await bots["admin"].send_message(
            chat_id=config.admin_id,
            text=f"‚ùóÔ∏è <b>–ö–ª–∏–µ–Ω—Ç @{callback.from_user.username or callback.from_user.full_name} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ ‚Ññ{order_id}.</b>"
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω
        if executor_id_to_notify:
            try:
                await bots["executor"].send_message(
                    chat_id=executor_id_to_notify,
                    text=f"‚ùóÔ∏è<b>–û–¢–ú–ï–ù–ê –ó–ê–ö–ê–ó–ê</b>‚ùóÔ∏è\n\n–ö–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ ‚Ññ{order_id}, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –Ω–∞ –≤–∞—Å –Ω–∞–∑–Ω–∞—á–µ–Ω."
                )
            except Exception as e:
                logging.error(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {executor_id_to_notify} –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑.", show_alert=True)


@router.message(OrderStates.choosing_payment_method, F.text == "üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é")
async def handle_payment_cash(message: types.Message, state: FSMContext, session: AsyncSession, bots: dict,
                              config: Settings):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–ª–∞—Ç—É –Ω–∞–ª–∏—á–Ω—ã–º–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–∫–∞–∑ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.
    """
    user_data = await state.get_data()
    new_order = await create_order(session, user_data, client_tg_id=message.from_user.id)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É. –ú—ã –Ω–∞—á–∞–ª–∏ –ø–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ —Å–∫–æ—Ä–æ —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å.",
        reply_markup=get_main_menu_keyboard()
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
    # (–∑–¥–µ—Å—å –æ—Å—Ç–∞–µ—Ç—Å—è –≤–∞—à –∫–æ–¥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞, —è –µ–≥–æ —Å–æ–∫—Ä–∞—Ç–∏–ª –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏)
    summary_text_admin = f"‚úÖ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑! ‚Ññ{new_order.id}</b>..."
    await bots["admin"].send_message(chat_id=config.admin_id, text=summary_text_admin)

    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –û–ß–ï–†–ï–î–ò ---
    executors = await get_matching_executors(
        session, new_order.selected_date, new_order.selected_time
    )

    if executors:
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        next_executor = executors[0]

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –Ω–∏–∂–µ)
        await offer_order_to_executor(session, bots, new_order, next_executor)
    else:
        await bots["admin"].send_message(
            config.admin_id,
            f"‚ùóÔ∏è<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ù–∞ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{new_order.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π."
        )

    await state.clear()


async def offer_order_to_executor(session: AsyncSession, bots: dict, order: Order, executor: User):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–¥–Ω–æ–º—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ OrderOffer."""
    now = datetime.datetime.now(TYUMEN_TZ)
    order_start_time = datetime.datetime.strptime(
        f"{order.selected_date} {order.selected_time.split(' ')[0]}", "%Y-%m-%d %H:%M"
    ).replace(tzinfo=TYUMEN_TZ)

    time_to_order = order_start_time - now

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç
    if time_to_order < datetime.timedelta(hours=24):
        timeout_minutes = 15
    elif time_to_order < datetime.timedelta(days=3):
        timeout_minutes = 30
    else:
        timeout_minutes = 60

    expires_at = now + datetime.timedelta(minutes=timeout_minutes)

    # –£–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–π–º–∑–æ–Ω–µ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –≤ –ë–î
    naive_expires_at = expires_at.replace(tzinfo=None)

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –ë–î —Å "–Ω–∞–∏–≤–Ω—ã–º" –≤—Ä–µ–º–µ–Ω–µ–º
    await create_order_offer(session, order.id, executor.telegram_id, naive_expires_at)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    executor_payment = round(order.total_price * 0.85)
    notification_text = (
        f"üî• <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order.id}</b>\n\n"
        f"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {order.selected_date}, {order.selected_time}\n"
        f"üí∞ <b>–í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞:</b> {executor_payment} ‚ÇΩ\n\n"
        f"<i>–£ –≤–∞—Å –µ—Å—Ç—å {timeout_minutes} –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ.</i>"
    )
    notification_keyboard = get_new_order_notification_keyboard(order.id, timeout_minutes)

    try:
        await bots["executor"].send_message(
            chat_id=executor.telegram_id,
            text=notification_text,
            reply_markup=notification_keyboard
        )
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é {executor.telegram_id}: {e}")

@router.message(OrderStates.choosing_payment_method, F.text == "üí≥ –û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞")
async def handle_payment_online(message: types.Message): # <--- –£–ë–†–ê–ù state
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—É."""
    await message.answer(
        "–†–∞–∑–¥–µ–ª –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞–ª–∏—á–Ω—ã–º–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.",
        reply_markup=get_payment_keyboard()
    )

# --- –ï–î–ò–ù–´–ô –ë–õ–û–ö –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í "–ù–ê–ó–ê–î" ---

@router.message(OrderStates.choosing_cleaning_type, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.clear()
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_menu_keyboard()
    )

@router.message(OrderStates.choosing_room_count, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_cleaning_type(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —É–±–æ—Ä–∫–∏."""
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —É–±–æ—Ä–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
        reply_markup=get_cleaning_type_keyboard()
    )
    await state.set_state(OrderStates.choosing_cleaning_type)

@router.message(OrderStates.choosing_bathroom_count, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_room_count(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç."""
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
        reply_markup=get_room_count_keyboard()
    )
    await state.set_state(OrderStates.choosing_room_count)

@router.callback_query(OrderStates.choosing_additional_services, F.data == "back_to_bathrooms")
async def back_to_bathroom_count(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∞–Ω—É–∑–ª–æ–≤."""
    await callback.message.delete()
    await callback.message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∞–Ω—É–∑–ª–æ–≤.",
        reply_markup=get_bathroom_count_keyboard()
    )
    await state.set_state(OrderStates.choosing_bathroom_count)
    await callback.answer()

@router.message(OrderStates.entering_address, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–æ–ø. —É—Å–ª—É–≥–∞–º")
async def back_to_additional_services(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –¥–æ–ø. —É—Å–ª—É–≥."""
    user_data = await state.get_data()
    selected_services = user_data.get("selected_services", set())
    total_cost = user_data.get("total_cost", user_data.get("preliminary_cost", 0))

    await message.answer(
        f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–±–æ—Ä–∫–∏: <b>{total_cost} ‚ÇΩ</b>.\n\n"
        f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥–∏:",
        reply_markup=get_additional_services_keyboard(selected_services)
    )
    await state.set_state(OrderStates.choosing_additional_services)

# --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê ---

# --- –ë–õ–û–ö: –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –°–ò–°–¢–ï–ú–´ –ü–û–î–î–ï–†–ñ–ö–ò ---

@router.callback_query(F.data == "create_ticket")
async def create_ticket_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞."""
    await callback.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. "
        "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ."
    )
    await state.set_state(SupportStates.creating_ticket_message)
    await callback.answer()


@router.message(SupportStates.creating_ticket_message, F.text)
async def create_ticket_message_received(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ."""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –±—É–¥—É—â–µ–≥–æ —Ç–∏–∫–µ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(ticket_text=message.text)

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, —á—Ç–æ–±—ã –ª—É—á—à–µ –æ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É, –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.",
        reply_markup=get_skip_photo_keyboard()
    )
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —à–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
    await state.set_state(SupportStates.waiting_for_ticket_photo)

@router.callback_query(F.data == "my_tickets")
async def my_tickets_list(callback: types.CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_tickets = await get_user_tickets(session, user_tg_id=callback.from_user.id)

    if not user_tickets:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=get_support_menu_keyboard() # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        )
    else:
        await callback.message.edit_text(
            "–í–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:",
            reply_markup=get_my_tickets_keyboard(user_tickets)
        )
    await callback.answer()

@router.callback_query(F.data == "back_to_support_menu")
async def back_to_support_menu(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏."""
    await callback.message.edit_text(
        "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ß–µ–º –º—ã –º–æ–∂–µ–º –ø–æ–º–æ—á—å?",
        reply_markup=get_support_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("view_ticket:"))
async def view_ticket(callback: types.CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ–ø–∏—Å–∫—É –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∏–∫–µ—Ç—É, –≤–∫–ª—é—á–∞—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ."""
    ticket_id = int(callback.data.split(":")[1])
    ticket = await get_ticket_by_id(session, ticket_id)

    if not ticket or ticket.user_tg_id != callback.from_user.id:
        await callback.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∫–∏ ---
    history = f"<b>–û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{ticket.id} –æ—Ç {ticket.created_at.strftime('%d.%m.%Y')}</b>\n"
    history += f"–°—Ç–∞—Ç—É—Å: <i>{ticket.status.value}</i>\n\n"

    last_photo_id = None
    # –°–æ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ
    for message in sorted(ticket.messages, key=lambda m: m.created_at):
        author = "–í—ã" if message.author == MessageAuthor.client else "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
        time = message.created_at.strftime('%H:%M')
        history += f"<b>{author}</b> ({time}):\n{message.text}\n"
        if message.photo_file_id:
            history += "<i>–ö —Å–æ–æ–±—â–µ–Ω–∏—é –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–æ—Ç–æ.</i>\n"
            last_photo_id = message.photo_file_id # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ—Ç–æ
        history += "\n"

    keyboard = get_view_ticket_keyboard(ticket)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤ –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ) –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
    await callback.message.delete()

    if last_photo_id:
        # –ï—Å–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑ –Ω–∏—Ö —Å –ø–æ–¥–ø–∏—Å—å—é
        try:
            await callback.message.answer_photo(
                photo=last_photo_id,
                caption=history,
                reply_markup=keyboard
            )
        except TelegramBadRequest:
            # –ï—Å–ª–∏ file_id –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            await callback.message.answer(text=history, reply_markup=keyboard)
    else:
        # –ï—Å–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(text=history, reply_markup=keyboard)

    await callback.answer()


@router.callback_query(F.data.startswith("reply_ticket:"))
async def reply_to_ticket_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç."""
    ticket_id = int(callback.data.split(":")[1])
    await state.update_data(replying_ticket_id=ticket_id)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–æ—Å—å
    await callback.message.delete()
    # –ò –ø—Ä–∏—Å—ã–ª–∞–µ–º –Ω–æ–≤–æ–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
    )
    await state.set_state(SupportStates.replying_to_ticket)
    await callback.answer()


@router.message(SupportStates.replying_to_ticket, F.text)
async def reply_to_ticket_message_received(message: types.Message, state: FSMContext, session: AsyncSession, bots: dict,
                                           config: Settings):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —Ç–∏–∫–µ—Ç –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞."""
    user_data = await state.get_data()
    ticket_id = user_data.get("replying_ticket_id")

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
    await add_message_to_ticket(
        session=session,
        ticket_id=ticket_id,
        author=MessageAuthor.client,
        text=message.text
    )

    await message.answer("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    await state.clear()

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ‚Ññ2: –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞ ---
    admin_text = (
        f"üí¨ <b>–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ —Ç–∏–∫–µ—Ç—É ‚Ññ{ticket_id}</b>\n\n"
        f"<b>–û—Ç –∫–ª–∏–µ–Ω—Ç–∞:</b> @{message.from_user.username or message.from_user.full_name}\n\n"
        f"<b>–¢–µ–∫—Å—Ç:</b>\n{message.text}"
    )
    go_to_ticket_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–∏–∫–µ—Ç—É", callback_data=f"admin_view_ticket:{ticket_id}")]
    ])
    await bots["admin"].send_message(
        config.admin_id,
        admin_text,
        reply_markup=go_to_ticket_keyboard
    )

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ‚Ññ1: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤ ---
    user_tickets = await get_user_tickets(session, user_tg_id=message.from_user.id)
    await message.answer(
        "–í–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:",
        reply_markup=get_my_tickets_keyboard(user_tickets)
    )


@router.callback_query(F.data.startswith("close_ticket:"))
async def close_ticket(callback: types.CallbackQuery, session: AsyncSession):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–∏–∫–µ—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    ticket_id = int(callback.data.split(":")[1])

    await update_ticket_status(session, ticket_id, TicketStatus.closed)

    await callback.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.", show_alert=True)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    await view_ticket(callback, session)


async def finish_ticket_creation(message: types.Message, state: FSMContext, session: AsyncSession, bots: dict,
                                 config: Settings, photo_id: str | None = None):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞."""
    user_data = await state.get_data()
    ticket_text = user_data.get("ticket_text")

    new_ticket = await create_ticket(
        session=session,
        user_tg_id=message.from_user.id,
        message_text=ticket_text,
        photo_id=photo_id
    )

    if new_ticket:
        await message.answer(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{new_ticket.id} –ø—Ä–∏–Ω—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É.",
            reply_markup=types.ReplyKeyboardRemove()
        )

        # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ê ---
        admin_bot = bots["admin"]
        client_bot = bots["client"]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        admin_caption = (
            f"‚ùóÔ∏è <b>–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚Ññ{new_ticket.id}</b>\n\n"
            f"<b>–û—Ç –∫–ª–∏–µ–Ω—Ç–∞:</b> @{message.from_user.username or message.from_user.full_name} ({message.from_user.id})\n\n"
            f"<b>–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>\n{ticket_text}"
        )

        # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ç–∏–∫–µ—Ç—É
        go_to_ticket_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–∏–∫–µ—Ç—É", callback_data=f"admin_view_ticket:{new_ticket.id}")]
        ])

        if photo_id:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤ –ø–∞–º—è—Ç–∏
            photo_file = await client_bot.get_file(photo_id)
            photo_bytes_io = await client_bot.download_file(photo_file.file_path)
            photo_bytes = photo_bytes_io.read()  # –ß–∏—Ç–∞–µ–º –±–∞–π—Ç—ã –∏–∑ –æ–±—ä–µ–∫—Ç–∞ BytesIO

            # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –±–∞–π—Ç—ã –≤ BufferedInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            photo_to_send = BufferedInputFile(photo_bytes, filename="photo.jpg")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –ö–ù–û–ü–ö–û–ô –æ—Ç –∏–º–µ–Ω–∏ –ê–î–ú–ò–ù-–ë–û–¢–ê
            await admin_bot.send_photo(
                chat_id=config.admin_id,
                photo=photo_to_send,
                caption=admin_caption,
                reply_markup=go_to_ticket_keyboard
            )
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –ö–ù–û–ü–ö–£ –æ—Ç –∏–º–µ–Ω–∏ –ê–î–ú–ò–ù-–ë–û–¢–ê
            await admin_bot.send_message(
                config.admin_id,
                admin_caption,
                reply_markup=go_to_ticket_keyboard
            )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç—É
        user_tickets = await get_user_tickets(session, user_tg_id=message.from_user.id)
        await message.answer(
            "–í–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:",
            reply_markup=get_my_tickets_keyboard(user_tickets)
        )
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    await state.clear()


@router.message(SupportStates.waiting_for_ticket_photo, F.photo)
async def ticket_photo_received(message: types.Message, state: FSMContext, session: AsyncSession, bots: dict,
                                config: Settings):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–æ—Ç–æ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞."""
    photo_id = message.photo[-1].file_id
    await finish_ticket_creation(message, state, session, bots, config, photo_id)


@router.message(SupportStates.waiting_for_ticket_photo, F.text == "‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def ticket_photo_skipped(message: types.Message, state: FSMContext, session: AsyncSession, bots: dict,
                               config: Settings):
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —à–∞–≥ —Å —Ñ–æ—Ç–æ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞."""
    await finish_ticket_creation(message, state, session, bots, config)


@router.message(SupportStates.waiting_for_ticket_photo, F.text == "‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞")
async def ticket_creation_cancelled(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏."""
    await state.clear()
    await message.answer(
        "–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    await message.answer(
        "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ß–µ–º –º—ã –º–æ–∂–µ–º –ø–æ–º–æ—á—å?",
        reply_markup=get_support_menu_keyboard()
    )

# --- –ë–õ–û–ö: –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–¶–ï–ù–ö–ò –ò –û–¢–ó–´–í–ê ---

@router.callback_query(F.data.startswith("rate_order:"))
async def rate_order_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ü–µ–Ω–∫–∏ –∑–∞–∫–∞–∑–∞."""
    order_id = int(callback.data.split(":")[1])
    await state.update_data(order_id_for_rating=order_id)

    await callback.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã:",
        reply_markup=get_rating_keyboard(order_id)
    )
    await state.set_state(RatingStates.waiting_for_rating)
    await callback.answer()

@router.callback_query(RatingStates.waiting_for_rating, F.data.startswith("set_rating:"))
async def handle_rating(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ü–µ–Ω–∫–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤."""
    _, order_id_str, rating_str = callback.data.split(":")
    order_id = int(order_id_str)
    rating = int(rating_str)

    await state.update_data(current_rating=rating)

    await callback.message.edit_text(
        f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É: {'‚≠ê' * rating}\n\n"
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è. "
        "–í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ."
    )
    await state.set_state(RatingStates.waiting_for_review)
    await callback.answer()

@router.message(RatingStates.waiting_for_review, F.text)
async def handle_review(message: types.Message, state: FSMContext, session: AsyncSession, bots: dict, config: Settings):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–∑—ã–≤, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å."""
    user_data = await state.get_data()
    order_id = user_data.get("order_id_for_rating")
    rating = user_data.get("current_rating")
    review_text = message.text

    # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –∏ –æ—Ç–∑—ã–≤ –≤ –∑–∞–∫–∞–∑–µ
    order = await save_order_rating(session, order_id, rating, review_text)

    if not order or not order.executor_tg_id:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à –æ—Ç–∑—ã–≤.")
        await state.clear()
        return

    # 2. –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    await update_executor_rating(session, order.executor_tg_id)

    await message.answer(
        "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ.",
        reply_markup=get_main_menu_keyboard()
    )

    # 3. –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –æ –Ω–æ–≤–æ–π –æ—Ü–µ–Ω–∫–µ
    try:
        executor_bot = bots.get("executor")
        await executor_bot.send_message(
            chat_id=order.executor_tg_id,
            text=(
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order_id}.\n\n"
                f"<b>–û—Ü–µ–Ω–∫–∞:</b> {'‚≠ê' * rating}\n"
                f"<b>–û—Ç–∑—ã–≤ –∫–ª–∏–µ–Ω—Ç–∞:</b> {review_text}\n\n"
                "–í–∞—à –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω."
            )
        )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ü–µ–Ω–∫–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é {order.executor_tg_id}: {e}")

    await state.clear()

# --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê ---

# --- –ë–õ–û–ö: –ß–ê–¢ –° –ò–°–ü–û–õ–ù–ò–¢–ï–õ–ï–ú ---

@router.callback_query(F.data.startswith("start_chat:"))
async def start_chat_with_executor(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —á–∞—Ç —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∑–∞–∫–∞–∑—É."""
    order_id = int(callback.data.split(":")[1])
    order = await get_order_by_id(session, order_id)

    if not order or not order.executor_tg_id:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É.", show_alert=True)
        return

    await state.set_state(ChatStates.in_chat)
    await state.update_data(chat_partner_id=order.executor_tg_id, order_id=order.id)

    await callback.message.answer(
        f"–í—ã –≤–æ—à–ª–∏ –≤ —á–∞—Ç —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order.id}.\n"
        "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å—é–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ, –±—É–¥—É—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω—ã –µ–º—É. "
        "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=get_exit_chat_keyboard()
    )
    await callback.answer()


@router.message(ChatStates.in_chat, F.text == "‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞")
async def exit_chat_client(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞."""
    await state.clear()
    await message.answer(
        "–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_menu_keyboard()
    )


@router.message(ChatStates.in_chat)
async def forward_message_to_executor(message: types.Message, state: FSMContext, bots: dict):
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é."""
    user_data = await state.get_data()
    partner_id = user_data.get("chat_partner_id")
    order_id = user_data.get("order_id")

    if not partner_id:
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª—å–±–æ–º, –≤–µ–∂–ª–∏–≤–æ –ø—Ä–æ—Å–∏–º —ç—Ç–æ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å
    if message.media_group_id:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –æ–¥–Ω–æ–π –∑–∞ —Ä–∞–∑.")
        return

    executor_bot = bots.get("executor")
    prefix = f"üí¨ <b>[–ö–ª–∏–µ–Ω—Ç | –ó–∞–∫–∞–∑ ‚Ññ{order_id}]:</b>\n"
    reply_keyboard = get_reply_to_chat_keyboard(order_id)

    try:
        if message.text:
            await executor_bot.send_message(partner_id, f"{prefix}{message.text}", reply_markup=reply_keyboard)
        elif message.photo:
            photo_file = await message.bot.get_file(message.photo[-1].file_id)
            photo_bytes_io = await message.bot.download_file(photo_file.file_path)
            photo_to_send = BufferedInputFile(photo_bytes_io.read(), filename="photo.jpg")

            await executor_bot.send_photo(
                chat_id=partner_id,
                photo=photo_to_send,
                caption=f"{prefix}{message.caption or ''}",
                reply_markup=reply_keyboard
            )

        await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é {partner_id}: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê ---