import datetime
import logging
from contextlib import suppress
from zoneinfo import ZoneInfo

from aiogram import F, Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import Settings
from app.handlers.states import OrderStates
from app.keyboards.client_kb import (
    ADDITIONAL_SERVICES,
    create_calendar,
    get_active_orders_keyboard,
    get_view_order_keyboard,
    get_archive_orders_keyboard,
    get_view_archive_order_keyboard,
    get_address_confirmation_keyboard,
    get_address_keyboard,
    get_additional_services_keyboard,
    get_bathroom_count_keyboard,
    get_cleaning_type_keyboard,
    get_confirmation_keyboard,
    get_edit_order_keyboard,
    get_main_menu_keyboard,
    get_order_name_keyboard,
    get_order_phone_keyboard,
    get_payment_keyboard,
    get_photo_keyboard,
    get_room_count_keyboard,
    get_time_keyboard,
)
from app.services.db_queries import (
    create_order,
    create_user,
    get_user,
    get_user_orders,
    update_order_datetime,
    update_order_services_and_price,
    update_order_address,
    update_order_rooms_and_price,
    update_order_status,
    OrderStatus, get_order_by_id
)
from app.services.price_calculator import ADDITIONAL_SERVICE_PRICES, calculate_preliminary_cost
from app.services.yandex_maps_api import get_address_from_coords, get_address_from_text
from app.common.texts import STATUS_MAPPING, RUSSIAN_MONTHS_GENITIVE

TYUMEN_TZ = ZoneInfo("Asia/Yekaterinburg") # UTC+5, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¢—é–º–µ–Ω–∏
ALL_TIME_SLOTS = ["9:00 - 12:00", "12:00 - 15:00", "15:00 - 18:00", "18:00 - 21:00"]

router = Router()
@router.message(CommandStart())
async def cmd_start(message: types.Message, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await state.clear()
    user = await get_user(session, message.from_user.id)

    if user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º
        await message.answer(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.name}!",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –°–û–ó–î–ê–ï–ú –ï–ì–û –°–†–ê–ó–£
        await create_user(
            session,
            telegram_id=message.from_user.id,
            name=message.from_user.full_name
            # –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º
        )
        await message.answer(
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ.",
            reply_markup=get_main_menu_keyboard()
        )

@router.message(F.text == "üì¶ –ó–∞–∫–∞–∑–∞—Ç—å —É–±–æ—Ä–∫—É")
async def start_order(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–±–æ—Ä–∫–∏:",
        reply_markup=get_cleaning_type_keyboard()
    )
    await state.set_state(OrderStates.choosing_cleaning_type)


@router.message(
    OrderStates.choosing_cleaning_type,
    F.text.in_({"üßΩ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è", "üßº –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è", "üõ† –ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞"})
)
async def handle_cleaning_type(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —É–±–æ—Ä–∫–∏ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç."""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —É–±–æ—Ä–∫–∏
    await state.update_data(cleaning_type=message.text)

    await message.answer(
        "–ó–∞–ø–∏—Å–∞–ª. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:",
        reply_markup=get_room_count_keyboard()
    )
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    await state.set_state(OrderStates.choosing_room_count)

@router.message(
    OrderStates.choosing_room_count,
    F.text.in_({"1", "2", "3", "4", "5+"})
)
async def handle_room_count(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–Ω—É–∑–ª–æ–≤."""
    await state.update_data(room_count=message.text)
    await message.answer(
        "–ü—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–Ω—É–∑–ª–æ–≤:",
        reply_markup=get_bathroom_count_keyboard()
    )
    await state.set_state(OrderStates.choosing_bathroom_count)


@router.message(
    OrderStates.choosing_bathroom_count,
    F.text.in_({"1", "2", "3+"})
)
async def handle_bathroom_count(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∞–Ω—É–∑–ª–æ–≤, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –¥–æ–ø. —É—Å–ª—É–≥.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–Ω—É–∑–ª–æ–≤
    await state.update_data(bathroom_count=message.text)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    cost = calculate_preliminary_cost(
        cleaning_type=user_data.get("cleaning_type"),
        room_count_str=user_data.get("room_count"),
        bathroom_count_str=user_data.get("bathroom_count")
    )

    await state.update_data(preliminary_cost=cost)

    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é, –∫–æ—Ç–æ—Ä–æ–µ —É–±–∏—Ä–∞–µ—Ç –Ω–∏–∂–Ω—é—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–±–æ—Ä–∫–∏: <b>{cost} ‚ÇΩ</b>.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–æ–ø. —É—Å–ª—É–≥
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω—É–∂–Ω—ã, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
        reply_markup=get_additional_services_keyboard()
    )
    await state.set_state(OrderStates.choosing_additional_services)


@router.message(F.text == "üí¨ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def my_orders(message: types.Message, session: AsyncSession, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫."""
    await state.clear()  # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    orders = await get_user_orders(session, client_tg_id=message.from_user.id)
    active_orders = [o for o in orders if o.status in (OrderStatus.new, OrderStatus.accepted, OrderStatus.in_progress)]

    if not active_orders:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∞—Ä—Ö–∏–≤
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üóÇ –ê—Ä—Ö–∏–≤ –∑–∞–∫–∞–∑–æ–≤", callback_data="view_archive")]
            ])
        )
        return

    await message.answer(
        "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:",
        reply_markup=get_active_orders_keyboard(active_orders)
    )

@router.callback_query(F.data.startswith("edit_order:"))
async def edit_order_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    order_id = int(callback.data.split(":")[1])
    await state.update_data(order_id_to_edit=order_id)

    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω –∑–∞–∫–∞–∑ ‚Ññ{order_id}. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=get_edit_order_keyboard()
    )
    await state.set_state(OrderStates.editing_order)
    await callback.answer()


@router.callback_query(F.data.startswith("view_order:"))
async def view_order(callback: types.CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ."""
    order_id = int(callback.data.split(":")[1])
    order = await get_order_by_id(session, order_id)

    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    can_be_edited = False
    try:
        order_start_time_str = order.selected_time.split(' ')[0]
        order_datetime_str = f"{order.selected_date} {order_start_time_str}"
        naive_order_datetime = datetime.datetime.strptime(order_datetime_str, "%Y-%m-%d %H:%M")
        aware_order_datetime = naive_order_datetime.replace(tzinfo=TYUMEN_TZ)
        if aware_order_datetime - datetime.datetime.now(TYUMEN_TZ) > datetime.timedelta(hours=12):
            can_be_edited = True
    except (ValueError, IndexError):
        pass # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –¥–∞—Ç–æ–π, –ø—Ä–æ—Å—Ç–æ –Ω–µ –¥–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å

    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–ø. —É—Å–ª—É–≥–∞—Ö
    selected_services_text = "\n".join(
        [f"    - {ADDITIONAL_SERVICES[item.service_key]}" for item in order.items]
    ) or "–ù–µ—Ç"

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    try:
        selected_date = datetime.datetime.strptime(order.selected_date, "%Y-%m-%d")
        formatted_date = f"{selected_date.day} {RUSSIAN_MONTHS_GENITIVE[selected_date.month]} {selected_date.year}"
    except (ValueError, KeyError, TypeError):
        formatted_date = order.selected_date

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    order_details = (
        f"<b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id}</b>\n\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> <i>{STATUS_MAPPING.get(order.status, order.status.value)}</i>\n"
        f"<b>–¢–∏–ø —É–±–æ—Ä–∫–∏:</b> {order.cleaning_type}\n"
        f"<b>–ö–æ–º–Ω–∞—Ç:</b> {order.room_count}, <b>–°–∞–Ω—É–∑–ª–æ–≤:</b> {order.bathroom_count}\n\n"
        f"<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n{selected_services_text}\n\n"
        f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.address_text}\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {formatted_date}\n"
        f"üïí <b>–í—Ä–µ–º—è:</b> {order.selected_time}\n\n"
        f"üí∞ <b>–ò–¢–û–ì–û–í–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {order.total_price} ‚ÇΩ</b>"
    )

    await callback.message.edit_text(
        order_details,
        reply_markup=get_view_order_keyboard(order_id, can_be_edited=can_be_edited)
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_orders_list")
async def back_to_orders_list(callback: types.CallbackQuery, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤."""
    # –ú—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–≤–∞—Ç—å my_orders, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ message,
    # –∞ —É –Ω–∞—Å callback. –ü–æ—ç—Ç–æ–º—É –º—ã –¥—É–±–ª–∏—Ä—É–µ–º –µ–≥–æ –ª–æ–≥–∏–∫—É, –Ω–æ –¥–ª—è callback.
    await callback.answer()
    orders = await get_user_orders(session, client_tg_id=callback.from_user.id)
    active_orders = [o for o in orders if o.status in (OrderStatus.new, OrderStatus.accepted, OrderStatus.in_progress)]

    if not active_orders:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üóÇ –ê—Ä—Ö–∏–≤ –∑–∞–∫–∞–∑–æ–≤", callback_data="view_archive")]
            ])
        )
        return

    await callback.message.edit_text(
        "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:",
        reply_markup=get_active_orders_keyboard(active_orders)
    )


@router.callback_query(F.data == "view_archive")
async def view_archive(callback: types.CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞—Ä—Ö–∏–≤ –∑–∞–∫–∞–∑–æ–≤."""
    await callback.answer()
    orders = await get_user_orders(session, client_tg_id=callback.from_user.id)
    completed_orders = [o for o in orders if o.status in (OrderStatus.completed, OrderStatus.cancelled)]

    if not completed_orders:
        await callback.message.edit_text(
            "–í–∞—à –∞—Ä—Ö–∏–≤ –ø—É—Å—Ç.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_orders_list")]
            ])
        )
        return

    await callback.message.edit_text(
        "–ê—Ä—Ö–∏–≤ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤:",
        reply_markup=get_archive_orders_keyboard(completed_orders)
    )

@router.callback_query(F.data.startswith("view_archive_order:"))
async def view_archive_order(callback: types.CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∞—Ä—Ö–∏–≤–Ω–æ–º –∑–∞–∫–∞–∑–µ."""
    order_id = int(callback.data.split(":")[1])
    order = await get_order_by_id(session, order_id)

    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ view_order)
    selected_services_text = "\n".join(
        [f"    - {ADDITIONAL_SERVICES[item.service_key]}" for item in order.items]
    ) or "–ù–µ—Ç"
    try:
        selected_date = datetime.datetime.strptime(order.selected_date, "%Y-%m-%d")
        formatted_date = f"{selected_date.day} {RUSSIAN_MONTHS_GENITIVE[selected_date.month]} {selected_date.year}"
    except (ValueError, KeyError, TypeError):
        formatted_date = order.selected_date

    order_details = (
        f"<b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id} (–ê—Ä—Ö–∏–≤)</b>\n\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> <i>{STATUS_MAPPING.get(order.status, order.status.value)}</i>\n"
    f"<b>–¢–∏–ø —É–±–æ—Ä–∫–∏:</b> {order.cleaning_type}\n"

    f"<b>–ö–æ–º–Ω–∞—Ç:</b> {order.room_count}, <b>–°–∞–Ω—É–∑–ª–æ–≤:</b> {order.bathroom_count}\n\n"

    f"<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n{selected_services_text}\n\n"

    f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.address_text}\n"

    f"üìÖ <b>–î–∞—Ç–∞:</b> {formatted_date}\n"

    f"üïí <b>–í—Ä–µ–º—è:</b> {order.selected_time}\n\n"

    f"üí∞ <b>–ò–¢–û–ì–û–í–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {order.total_price} ‚ÇΩ</b>"
    )

    await callback.message.edit_text(
        order_details,
        reply_markup=get_view_archive_order_keyboard(order_id)
    )
    await callback.answer()

@router.callback_query(OrderStates.editing_order, F.data == "edit_datetime")
async def edit_order_datetime(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞."""
    await callback.message.delete()
    now = datetime.datetime.now()
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞:",
        reply_markup=await create_calendar(now.year, now.month)
    )
    # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–µ–π—Ç –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    await state.set_state(OrderStates.choosing_date)
    await callback.answer()

@router.callback_query(OrderStates.editing_order, F.data == "back_to_my_orders")
async def back_to_orders_from_edit(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    await state.clear()
    await callback.message.delete()
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–∫–∞–∑—ã
    await my_orders(callback.message, session, state)
    await callback.answer()

@router.callback_query(OrderStates.editing_order, F.data == "edit_services")
async def edit_order_services_start(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–ø. —É—Å–ª—É–≥ –¥–ª—è –∑–∞–∫–∞–∑–∞."""
    user_data = await state.get_data()
    order_id = user_data.get("order_id_to_edit")

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –∏–∑ –ë–î
    order = await get_order_by_id(session, order_id)
    if not order:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (–±–µ–∑ –¥–æ–ø. —É—Å–ª—É–≥)
    preliminary_cost = calculate_preliminary_cost(
        cleaning_type=order.cleaning_type,
        room_count_str=order.room_count,
        bathroom_count_str=order.bathroom_count
    )

    # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
    selected_services = {item.service_key for item in order.items}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å
    await state.update_data(preliminary_cost=preliminary_cost, selected_services=selected_services)

    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {order.total_price} ‚ÇΩ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ —Å–Ω–∏–º–∏—Ç–µ –≤—ã–±–æ—Ä —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥:",
        reply_markup=get_additional_services_keyboard(selected_services)
    )

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –Ω–æ–≤—ã–π —Å—Ç–µ–π—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥
    await state.set_state(OrderStates.editing_additional_services)
    await callback.answer()

@router.callback_query(OrderStates.editing_order, F.data == "edit_address")
async def edit_address_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞."""
    await callback.message.delete()
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.",
        reply_markup=get_address_keyboard()
    )
    # –ú—ã –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
    await state.set_state(OrderStates.entering_address)
    await callback.answer()

@router.callback_query(OrderStates.editing_order, F.data == "edit_rooms")
async def edit_rooms_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç."""
    await callback.message.delete()
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:",
        reply_markup=get_room_count_keyboard()
    )
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –Ω–æ–≤—ã–π —Å—Ç–µ–π—Ç
    await state.set_state(OrderStates.editing_room_count)
    await callback.answer()

@router.message(
    OrderStates.editing_room_count,
    F.text.in_({"1", "2", "3", "4", "5+"})
)
async def edit_room_count_chosen(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —Å–∞–Ω—É–∑–ª–∞—Ö."""
    await state.update_data(new_room_count=message.text)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–Ω—É–∑–ª–æ–≤:",
        reply_markup=get_bathroom_count_keyboard()
    )
    await state.set_state(OrderStates.editing_bathroom_count)


@router.message(
    OrderStates.editing_bathroom_count,
    F.text.in_({"1", "2", "3+"})
)
async def edit_bathroom_count_chosen(message: types.Message, state: FSMContext, session: AsyncSession, bots: dict, config: Settings):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∞–Ω—É–∑–ª—ã, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑."""
    await state.update_data(new_bathroom_count=message.text)
    user_data = await state.get_data()
    order_id = user_data.get("order_id_to_edit")

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å —Ç–∏–ø —É–±–æ—Ä–∫–∏ –∏ –¥–æ–ø. —É—Å–ª—É–≥–∏
    order = await get_order_by_id(session, order_id)
    if not order:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑.", reply_markup=get_main_menu_keyboard())
        await state.clear()
        return

    # --- –ì–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ ---
    # 1. –°—á–∏—Ç–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    new_preliminary_cost = calculate_preliminary_cost(
        cleaning_type=order.cleaning_type,
        room_count_str=user_data.get("new_room_count"),
        bathroom_count_str=user_data.get("new_bathroom_count")
    )
    # 2. –°—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ø. —É—Å–ª—É–≥ (–æ–Ω–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å)
    additional_cost = sum(ADDITIONAL_SERVICE_PRICES.get(item.service_key, 0) for item in order.items)
    # 3. –°–∫–ª–∞–¥—ã–≤–∞–µ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–π —Ü–µ–Ω—ã
    new_total_price = new_preliminary_cost + additional_cost

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    updated_order = await update_order_rooms_and_price(
        session,
        order_id=order_id,
        new_room_count=user_data.get("new_room_count"),
        new_bathroom_count=user_data.get("new_bathroom_count"),
        new_total_price=new_total_price
    )

    if updated_order:
        await message.answer(
            f"‚úÖ <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
            f"<b>–ö–æ–º–Ω–∞—Ç:</b> {updated_order.room_count}, <b>–°–∞–Ω—É–∑–ª–æ–≤:</b> {updated_order.bathroom_count}\n"
            f"üí∞ <b>–ù–æ–≤–∞—è –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {updated_order.total_price} ‚ÇΩ</b>",
            reply_markup=get_main_menu_keyboard()
        )
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await bots["admin"].send_message(
            config.admin_id,
            f"‚ùóÔ∏è <b>–í –∑–∞–∫–∞–∑–µ ‚Ññ{order_id} –∏–∑–º–µ–Ω–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.</b>\n"
            f"<b>–ö–æ–º–Ω–∞—Ç:</b> {updated_order.room_count}, <b>–°–∞–Ω—É–∑–ª–æ–≤:</b> {updated_order.bathroom_count}\n"
            f"<b>–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {updated_order.total_price} ‚ÇΩ"
        )
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.", reply_markup=get_main_menu_keyboard())

    await state.clear()

@router.callback_query(F.data.startswith("cancel_order:"))
async def cancel_order(callback: types.CallbackQuery, session: AsyncSession, bots: dict, config: Settings):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞."""
    order_id = int(callback.data.split(":")[1])

    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    updated_order = await update_order_status(session, order_id, OrderStatus.cancelled)

    if updated_order:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫—É
        await callback.message.edit_text(
            f"<b>–ó–∞–∫–∞–∑ ‚Ññ{updated_order.id} –æ—Ç {updated_order.created_at.strftime('%d.%m.%Y')}</b>\n"
            f"–°—Ç–∞—Ç—É—Å: <i>{STATUS_MAPPING.get(updated_order.status, updated_order.status.value)}</i>\n"
            f"–°—É–º–º–∞: {updated_order.total_price} ‚ÇΩ\n"
            f"–ê–¥—Ä–µ—Å: {updated_order.address_text}"
        )
        await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await bots["admin"].send_message(
            chat_id=config.admin_id,
            text=f"‚ùóÔ∏è <b>–ö–ª–∏–µ–Ω—Ç @{callback.from_user.username or callback.from_user.full_name} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ ‚Ññ{order_id}.</b>"
        )
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑.", show_alert=True)


@router.callback_query(F.data.startswith("repeat_order:"))
async def repeat_order(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä –∑–∞–∫–∞–∑–∞, –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ."""
    await callback.answer("–ó–∞–ø–æ–ª–Ω—è—é –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ—à–ª–æ–≥–æ –∑–∞–∫–∞–∑–∞...")
    order_id = int(callback.data.split(":")[1])

    old_order = await get_order_by_id(session, order_id)
    if not old_order:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—à–ª–æ–º –∑–∞–∫–∞–∑–µ.", show_alert=True)
        return

    # "–ö–ª–æ–Ω–∏—Ä—É–µ–º" –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_data({
        "cleaning_type": old_order.cleaning_type,
        "room_count": old_order.room_count,
        "bathroom_count": old_order.bathroom_count,
        "selected_services": {item.service_key for item in old_order.items},
        "address_text": old_order.address_text,
        "address_lat": old_order.address_lat,
        "address_lon": old_order.address_lon,
        "order_name": old_order.order_name,
        "order_phone": old_order.order_phone,
        "total_cost": old_order.total_price
    })

    user_data = await state.get_data()

    # --- –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—ç—Ç–æ—Ç –±–ª–æ–∫ –∫–æ–¥–∞ –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é) ---
    selected_services_keys = user_data.get("selected_services", set())
    selected_services_text = "\n".join(
        [f"    - {ADDITIONAL_SERVICES[key]}" for key in selected_services_keys]
    ) or "–ù–µ—Ç"

    summary_text = (
        f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑:</b>\n\n"
        f"<i>–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}. "
        f"–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞—Ö.</i>\n\n"
        f"<b>–¢–∏–ø —É–±–æ—Ä–∫–∏:</b> {user_data.get('cleaning_type')}\n"
        f"<b>–ö–æ–º–Ω–∞—Ç:</b> {user_data.get('room_count')}, <b>–°–∞–Ω—É–∑–ª–æ–≤:</b> {user_data.get('bathroom_count')}\n\n"
        f"<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n{selected_services_text}\n\n"
        f"üí∞ <b>–ò–¢–û–ì–û–í–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {user_data.get('total_cost')} ‚ÇΩ</b>"
    )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–æ
    await callback.message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —à–∞–≥ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –µ–µ –∏–∑–º–µ–Ω–∏—Ç—å
    now = datetime.datetime.now()
    await callback.message.answer(summary_text)
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞:",
        reply_markup=await create_calendar(now.year, now.month)
    )
    await state.set_state(OrderStates.choosing_date)

@router.message(F.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'."""
    await message.answer("–≠—Ç–æ —Ä–∞–∑–¥–µ–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –í—Å–∫–æ—Ä–µ –º—ã –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–∏–º.")


@router.callback_query(
    StateFilter(OrderStates.choosing_additional_services, OrderStates.editing_additional_services),
    F.data.startswith("add_service_")
)
async def handle_add_service(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä/–æ—Ç–º–µ–Ω—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —É—Å–ª—É–≥–∏."""
    service_key = callback.data.split("_")[-1]

    user_data = await state.get_data()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ø–∏—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å RuntimeError
    selected_services = user_data.get("selected_services", set()).copy()

    if service_key in selected_services:
        selected_services.remove(service_key)
    else:
        selected_services.add(service_key)

    await state.update_data(selected_services=selected_services)

    # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    preliminary_cost = user_data.get("preliminary_cost", 0)
    additional_cost = sum(ADDITIONAL_SERVICE_PRICES.get(s, 0) for s in selected_services)
    total_cost = preliminary_cost + additional_cost

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(total_cost=total_cost)

    with suppress(TelegramBadRequest):
        await callback.message.edit_text(
            f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–±–æ—Ä–∫–∏: <b>{total_cost} ‚ÇΩ</b>.\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
            reply_markup=get_additional_services_keyboard(selected_services)
        )
    await callback.answer()


@router.callback_query(
    StateFilter(OrderStates.choosing_additional_services, OrderStates.editing_additional_services),
    F.data == "done_services"
)
async def done_additional_services(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession, bots: dict,
                                   config: Settings):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—ã–±–æ—Ä –¥–æ–ø. —É—Å–ª—É–≥: –ª–∏–±–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è, –ª–∏–±–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤–≤–æ–¥—É –∞–¥—Ä–µ—Å–∞."""
    user_data = await state.get_data()
    order_id = user_data.get("order_id_to_edit")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –ø–æ—Å—á–∏—Ç–∞–Ω–∞
    if "total_cost" not in user_data:
        await state.update_data(total_cost=user_data.get("preliminary_cost"))
        user_data = await state.get_data()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ

    # –ï—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if order_id:
        new_services = user_data.get("selected_services", set())
        new_price = user_data.get("total_cost")

        updated_order = await update_order_services_and_price(session, order_id, new_services, new_price)

        if updated_order:
            await callback.message.edit_text(
                f"–û—Ç–ª–∏—á–Ω–æ! –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.\n"
                f"–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{new_price} ‚ÇΩ</b>"
            )
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            await bots["admin"].send_message(
                config.admin_id,
                f"‚ùóÔ∏è <b>–í –∑–∞–∫–∞–∑–µ ‚Ññ{order_id} –∏–∑–º–µ–Ω–µ–Ω—ã –¥–æ–ø. —É—Å–ª—É–≥–∏.</b>\n"
                f"–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {new_price} ‚ÇΩ"
            )
            await state.clear()
            await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu_keyboard())

        else:
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.", show_alert=True)
            await state.clear()

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    else:
        await callback.message.delete()
        await callback.message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
            reply_markup=get_address_keyboard()
        )
        await state.set_state(OrderStates.entering_address)

    await callback.answer()

@router.message(OrderStates.entering_address, F.location)
async def handle_address_location(message: types.Message, state: FSMContext, config: Settings):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –ø–æ–ª—É—á–∞–µ—Ç –∞–¥—Ä–µ—Å –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    lat, lon = message.location.latitude, message.location.longitude
    address_text = await get_address_from_coords(lat, lon, config.api_keys.yandex_api_key)

    if address_text:
        await state.update_data(address_lat=lat, address_lon=lon, address_text=address_text)
        await message.answer(
            f"–í–∞—à –∞–¥—Ä–µ—Å: <b>{address_text}</b>.\n–í—Å–µ –≤–µ—Ä–Ω–æ?",
            reply_markup=get_address_confirmation_keyboard()
        )
        await state.set_state(OrderStates.confirming_address)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.")


@router.message(OrderStates.entering_address, F.text)
async def handle_address_text(message: types.Message, state: FSMContext, config: Settings):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–æ–ø. —É—Å–ª—É–≥–∞–º":
        await back_to_additional_services(message, state)
        return

    validated_address = await get_address_from_text(message.text, config.api_keys.yandex_api_key)
    if validated_address:
        await state.update_data(address_text=validated_address)
        await message.answer(
            f"–ú—ã —É—Ç–æ—á–Ω–∏–ª–∏ –≤–∞—à –∞–¥—Ä–µ—Å: <b>{validated_address}</b>.\n–í—Å–µ –≤–µ—Ä–Ω–æ?",
            reply_markup=get_address_confirmation_keyboard()
        )
        await state.set_state(OrderStates.confirming_address)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.")


@router.message(OrderStates.confirming_address, F.text == "‚úÖ –î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ")
async def handle_address_confirmation(message: types.Message, state: FSMContext, session: AsyncSession, bots: dict, config: Settings):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞: –ª–∏–±–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑, –ª–∏–±–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ."""
    user_data = await state.get_data()
    order_id = user_data.get("order_id_to_edit")

    # –ï—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if order_id:
        new_address = user_data.get("address_text")
        new_lat = user_data.get("address_lat")
        new_lon = user_data.get("address_lon")

        updated_order = await update_order_address(session, order_id, new_address, new_lat, new_lon)

        if updated_order:
            await message.answer(
                f"–û—Ç–ª–∏—á–Ω–æ! –ê–¥—Ä–µ—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.\n\n"
                f"üìç <b>–ù–æ–≤—ã–π –∞–¥—Ä–µ—Å:</b> {new_address}",
                reply_markup=get_main_menu_keyboard()
            )
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            await bots["admin"].send_message(
                config.admin_id,
                f"‚ùóÔ∏è <b>–í –∑–∞–∫–∞–∑–µ ‚Ññ{order_id} –∏–∑–º–µ–Ω–µ–Ω –∞–¥—Ä–µ—Å.</b>\n"
                f"–ù–æ–≤—ã–π –∞–¥—Ä–µ—Å: {new_address}"
            )
        else:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.", reply_markup=get_main_menu_keyboard())

        await state.clear()

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    else:
        now = datetime.datetime.now()
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É:",
            reply_markup=await create_calendar(now.year, now.month)
        )
        await state.set_state(OrderStates.choosing_date)


@router.message(OrderStates.confirming_address, F.text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")
async def handle_reenter_address(message: types.Message, state: FSMContext):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –∑–∞–Ω–æ–≤–æ."""
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º (–ì–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º):",
        reply_markup=types.ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    )
    await state.set_state(OrderStates.entering_address)


# --- –ë–õ–û–ö: –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–ê–õ–ï–ù–î–ê–†–Ø ---
@router.callback_query(OrderStates.choosing_date, F.data.startswith("month_nav:"))
async def process_calendar_navigation(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é '–≤–ø–µ—Ä–µ–¥'/'–Ω–∞–∑–∞–¥' –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é."""
    user_id = callback.from_user.id
    username = callback.from_user.username or "unknown"
    try:
        _, direction, year_str, month_str = callback.data.split(":")
        year, month = int(year_str), int(month_str)

        if direction == "next":
            month += 1
            if month > 12:
                month = 1
                year += 1
        elif direction == "prev":
            month -= 1
            if month < 1:
                month = 12
                year -= 1
        with suppress(TelegramBadRequest):
            await callback.message.edit_reply_markup(
                reply_markup=await create_calendar(year, month)
            )
    except Exception as e:
        logging.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é: {e}",
            extra={"username": username, "user_id": user_id}
        )
    finally:
        await callback.answer()


@router.callback_query(OrderStates.choosing_date, F.data == "back_to_address")
async def back_to_address_step(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞."""
    await callback.message.delete()
    await callback.message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤–≤–æ–¥—É –∞–¥—Ä–µ—Å–∞. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.",
        reply_markup=get_address_keyboard()
    )
    await state.set_state(OrderStates.entering_address)
    await callback.answer()


@router.callback_query(OrderStates.choosing_date, F.data.startswith("day:"))
async def process_date_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏."""
    date_str = callback.data.split(":")[1]
    await state.update_data(selected_date=date_str)

    now_tyumen = datetime.datetime.now(TYUMEN_TZ)
    today_tyumen_str = now_tyumen.strftime("%Y-%m-%d")

    available_slots = ALL_TIME_SLOTS
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å, —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ—Ç—ã
    if date_str == today_tyumen_str:
        current_hour = now_tyumen.hour
        available_slots = [
            slot for slot in ALL_TIME_SLOTS if int(slot.split(':')[0]) > current_hour
        ]

    # –ï—Å–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å–ª–æ—Ç–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
    if not available_slots:
        await callback.answer("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.", show_alert=True)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        now = datetime.datetime.now()
        await callback.message.edit_reply_markup(reply_markup=await create_calendar(now.year, now.month))
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
    try:
        selected_date = datetime.datetime.strptime(date_str, "%Y-%m-%d")
        formatted_date = f"{selected_date.day} {RUSSIAN_MONTHS_GENITIVE[selected_date.month]} {selected_date.year}"
    except (ValueError, KeyError):
        formatted_date = date_str

    await callback.message.delete()
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {formatted_date}.\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:",
        reply_markup=get_time_keyboard(available_slots)
    )
    await state.set_state(OrderStates.choosing_time)
    await callback.answer()

@router.message(OrderStates.choosing_time, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã")
async def back_to_date_selection(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã (–∫–∞–ª–µ–Ω–¥–∞—Ä—é)."""
    now = datetime.datetime.now()
    # –£–±–∏—Ä–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º inline
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã.", reply_markup=types.ReplyKeyboardRemove())
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É:",
        reply_markup=await create_calendar(now.year, now.month)
    )
    await state.set_state(OrderStates.choosing_date)


@router.message(OrderStates.choosing_time, F.text)
async def handle_time_selection(message: types.Message, state: FSMContext, session: AsyncSession, bots: dict,
                                config: Settings):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏. –õ–∏–±–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –ª–∏–±–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π."""
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã":
        await back_to_date_selection(message, state)
        return

    await state.update_data(selected_time=message.text)
    user_data = await state.get_data()
    order_id = user_data.get("order_id_to_edit")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ª–∏ –º—ã –∑–∞–∫–∞–∑
    if order_id:
        new_date = user_data.get("selected_date")
        new_time = user_data.get("selected_time")

        updated_order = await update_order_datetime(session, order_id, new_date, new_time)

        if updated_order:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
            try:
                selected_date = datetime.datetime.strptime(new_date, "%Y-%m-%d")
                formatted_date = f"{selected_date.day} {RUSSIAN_MONTHS_GENITIVE[selected_date.month]} {selected_date.year}"
            except (ValueError, KeyError, TypeError):
                formatted_date = new_date

            await message.answer(
                f"–û—Ç–ª–∏—á–Ω–æ! –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã.\n\n"
                f"üìÖ <b>–ù–æ–≤–∞—è –¥–∞—Ç–∞:</b> {formatted_date}\n"
                f"üïí <b>–ù–æ–≤–æ–µ –≤—Ä–µ–º—è:</b> {new_time}",
                reply_markup=get_main_menu_keyboard()
            )
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (—Ç–æ–∂–µ —Å –∫—Ä–∞—Å–∏–≤–æ–π –¥–∞—Ç–æ–π)
            await bots["admin"].send_message(
                config.admin_id,
                f"‚ùóÔ∏è <b>–í –∑–∞–∫–∞–∑–µ ‚Ññ{order_id} –∏–∑–º–µ–Ω–µ–Ω–∞ –¥–∞—Ç–∞/–≤—Ä–µ–º—è.</b>\n"
                f"–ù–æ–≤–∞—è –¥–∞—Ç–∞: {formatted_date}\n"
                f"–ù–æ–≤–æ–µ –≤—Ä–µ–º—è: {new_time}"
            )
        else:
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_main_menu_keyboard()
            )

        await state.clear()

    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–ª–æ—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
        await message.answer(
            "–í—Ä–µ–º—è –≤—ã–±—Ä–∞–Ω–æ. –ü–æ –∂–µ–ª–∞–Ω–∏—é, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã, "
            "—á—Ç–æ–±—ã –º—ã –ª—É—á—à–µ –æ—Ü–µ–Ω–∏–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å. –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
            reply_markup=get_photo_keyboard()
        )
        await state.set_state(OrderStates.waiting_for_photo)

# --- –ë–õ–û–ö: –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –®–ê–ì–ê –° –§–û–¢–û ---

@router.message(OrderStates.waiting_for_photo, F.photo)
async def handle_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏."""
    await state.update_data(photo_file_id=message.photo[-1].file_id)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ, —Ñ–æ—Ç–æ –ø–æ–ª—É—á–∏–ª. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –∑–∞–∫–∞–∑–∞.",
        reply_markup=get_order_name_keyboard()
    )
    await state.set_state(OrderStates.entering_order_name)

@router.message(OrderStates.waiting_for_photo, F.text == "‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–ø—É—Å–∫ —à–∞–≥–∞ —Å —Ñ–æ—Ç–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏."""
    await message.answer(
        "–•–æ—Ä–æ—à–æ, –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —ç—Ç–æ—Ç —à–∞–≥. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –∑–∞–∫–∞–∑–∞.",
        reply_markup=get_order_name_keyboard()
    )
    await state.set_state(OrderStates.entering_order_name)


async def back_to_time_selection(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏."""
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏. –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:",
        reply_markup=get_time_keyboard(ALL_TIME_SLOTS)
    )
    await state.set_state(OrderStates.choosing_time)


# --- –ù–û–í–´–ô –ë–õ–û–ö: –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ù–¢–ê–ö–¢–ù–´–• –î–ê–ù–ù–´–• ---

@router.message(OrderStates.entering_order_name, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–æ—Ç–æ")
async def back_to_photo_step(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —à–∞–≥—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ."""
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ —à–∞–≥—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ. –ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        reply_markup=get_photo_keyboard()
    )
    await state.set_state(OrderStates.waiting_for_photo)


@router.message(OrderStates.entering_order_name, F.text)
async def handle_order_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω."""
    await state.update_data(order_name=message.text)
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ, {message.text}. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.",
        reply_markup=get_order_phone_keyboard()
    )
    await state.set_state(OrderStates.entering_order_phone)


@router.message(OrderStates.entering_order_phone, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–º–µ–Ω–∏")
async def back_to_name_step(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏."""
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –∑–∞–∫–∞–∑–∞:",
        reply_markup=get_order_name_keyboard()
    )
    await state.set_state(OrderStates.entering_order_name)

@router.message(OrderStates.confirming_order, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
async def back_to_phone_step(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤–≤–æ–¥—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.",
        reply_markup=get_order_phone_keyboard()
    )
    await state.set_state(OrderStates.entering_order_phone)

@router.message(OrderStates.entering_order_phone, (F.contact | F.text))
async def handle_order_phone(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    phone_number = message.contact.phone_number if message.contact else message.text
    await state.update_data(order_phone=phone_number)

    user_data = await state.get_data()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    date_str = user_data.get('selected_date')
    try:
        selected_date = datetime.datetime.strptime(date_str, "%Y-%m-%d")
        formatted_date = f"{selected_date.day} {RUSSIAN_MONTHS_GENITIVE[selected_date.month]} {selected_date.year}"
    except (ValueError, KeyError, TypeError):
        formatted_date = date_str

    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–ø. —É—Å–ª—É–≥–∞—Ö
    selected_services_keys = user_data.get("selected_services", set())
    selected_services_text = "\n".join(
        [f"    - {ADDITIONAL_SERVICES[key]}" for key in selected_services_keys]
    ) or "–ù–µ—Ç"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    summary_text = (
        f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:</b>\n\n"
        f"<b>–¢–∏–ø —É–±–æ—Ä–∫–∏:</b> {user_data.get('cleaning_type')}\n"
        f"<b>–ö–æ–º–Ω–∞—Ç:</b> {user_data.get('room_count')}, <b>–°–∞–Ω—É–∑–ª–æ–≤:</b> {user_data.get('bathroom_count')}\n\n"
        f"<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n{selected_services_text}\n\n"
        f"üìç <b>–ê–¥—Ä–µ—Å:</b> {user_data.get('address_text', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {formatted_date}\n"
        f"üïí <b>–í—Ä–µ–º—è:</b> {user_data.get('selected_time')}\n\n"
        f"üë§ <b>–ò–º—è:</b> {user_data.get('order_name')}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_data.get('order_phone')}\n\n"
        f"üí∞ <b>–ò–¢–û–ì–û–í–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {user_data.get('total_cost')} ‚ÇΩ</b>"
    )

    await message.answer(text=summary_text, reply_markup=get_confirmation_keyboard())
    await state.set_state(OrderStates.confirming_order)


@router.message(OrderStates.confirming_order, F.text == "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def handle_confirmation(message: types.Message, state: FSMContext): # <--- –£–ë–†–ê–ù session
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã."""
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=get_payment_keyboard()
    )
    await state.set_state(OrderStates.choosing_payment_method)

@router.message(OrderStates.confirming_order, F.text == "‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def handle_cancel_order(message: types.Message, state: FSMContext): # <--- –£–ë–†–ê–ù session
    """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–∫–∞–∑ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.clear()
    await message.answer(
        "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_menu_keyboard()
    )

@router.message(OrderStates.choosing_payment_method, F.text == "üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é")
async def handle_payment_cash(message: types.Message, state: FSMContext, session: AsyncSession, bots: dict, config: Settings): # <--- –ò–°–ü–û–õ–¨–ó–£–ï–ú bots
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–ª–∞—Ç—É –Ω–∞–ª–∏—á–Ω—ã–º–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–∫–∞–∑ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞."""
    user_data = await state.get_data()
    await create_order(session, user_data, client_tg_id=message.from_user.id)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É. –ú—ã —Å–∫–æ—Ä–æ –ø–æ–¥–±–µ—Ä–µ–º –¥–ª—è –≤–∞—Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.",
        reply_markup=get_main_menu_keyboard()
    )
    summary_text = (
        f"‚úÖ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n\n"
        f"<b>–ö–ª–∏–µ–Ω—Ç:</b> @{message.from_user.username or message.from_user.full_name} ({message.from_user.id})\n"
        f"<b>–ò–º—è –≤ –∑–∞–∫–∞–∑–µ:</b> {user_data.get('order_name')}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_data.get('order_phone')}\n\n"
        f"<b>–ê–¥—Ä–µ—Å:</b> {user_data.get('address_text', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {user_data.get('selected_date')} {user_data.get('selected_time')}\n\n"
        f"üí∞ <b>–ò–¢–û–ì–û–í–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {user_data.get('total_cost')} ‚ÇΩ</b>\n"
        f"<b>–¢–∏–ø –æ–ø–ª–∞—Ç—ã:</b> –ù–∞–ª–∏—á–Ω—ã–µ"
    )
    await bots["admin"].send_message(chat_id=config.admin_id, text=summary_text)
    await state.clear()

@router.message(OrderStates.choosing_payment_method, F.text == "üí≥ –û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞")
async def handle_payment_online(message: types.Message): # <--- –£–ë–†–ê–ù state
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—É."""
    await message.answer(
        "–†–∞–∑–¥–µ–ª –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞–ª–∏—á–Ω—ã–º–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.",
        reply_markup=get_payment_keyboard()
    )

# --- –ï–î–ò–ù–´–ô –ë–õ–û–ö –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í "–ù–ê–ó–ê–î" ---

@router.message(OrderStates.choosing_cleaning_type, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.clear()
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_menu_keyboard()
    )

@router.message(OrderStates.choosing_room_count, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_cleaning_type(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —É–±–æ—Ä–∫–∏."""
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —É–±–æ—Ä–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
        reply_markup=get_cleaning_type_keyboard()
    )
    await state.set_state(OrderStates.choosing_cleaning_type)

@router.message(OrderStates.choosing_bathroom_count, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_room_count(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç."""
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
        reply_markup=get_room_count_keyboard()
    )
    await state.set_state(OrderStates.choosing_room_count)

@router.callback_query(OrderStates.choosing_additional_services, F.data == "back_to_bathrooms")
async def back_to_bathroom_count(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∞–Ω—É–∑–ª–æ–≤."""
    await callback.message.delete()
    await callback.message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∞–Ω—É–∑–ª–æ–≤.",
        reply_markup=get_bathroom_count_keyboard()
    )
    await state.set_state(OrderStates.choosing_bathroom_count)
    await callback.answer()

@router.message(OrderStates.entering_address, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–æ–ø. —É—Å–ª—É–≥–∞–º")
async def back_to_additional_services(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –¥–æ–ø. —É—Å–ª—É–≥."""
    user_data = await state.get_data()
    selected_services = user_data.get("selected_services", set())
    total_cost = user_data.get("total_cost", user_data.get("preliminary_cost", 0))

    await message.answer(
        f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–±–æ—Ä–∫–∏: <b>{total_cost} ‚ÇΩ</b>.\n\n"
        f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥–∏:",
        reply_markup=get_additional_services_keyboard(selected_services)
    )
    await state.set_state(OrderStates.choosing_additional_services)

# --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê ---