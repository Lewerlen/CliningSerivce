import logging
import datetime
from aiogram import F, Router, types
from aiogram.filters import CommandStart, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, BufferedInputFile
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from typing import List
from app.config import Settings
from app.database.models import UserRole, OrderStatus, UserStatus, DeclinedOrder, MessageAuthor
from app.handlers.states import ExecutorRegistration, ChatStates, ExecutorSupportStates
from app.common.texts import ADDITIONAL_SERVICES, STATUS_MAPPING
from app.services.price_calculator import calculate_executor_payment
from app.services.db_queries import (
    get_user,
    register_executor,
    get_orders_by_status,
    get_order_by_id,
    assign_executor_to_order,
    get_executor_active_orders,
    update_order_status,
    add_photo_to_order,
    get_executor_schedule,
    update_executor_schedule,
    get_executor_completed_orders, get_user_by_referral_code,
    credit_referral_bonus, get_executor_orders_with_reviews,
    unassign_executor_from_order, increment_and_get_declines, reset_consecutive_declines, block_user_temporarily,
    unblock_user, add_declined_order, decline_active_offer, get_matching_executors, create_ticket, get_user_tickets,
    get_ticket_by_id
)
from app.handlers.client import find_and_notify_executors
from app.keyboards.executor_kb import (
    get_executor_main_keyboard, get_exit_chat_keyboard,
    get_phone_request_keyboard, get_reply_to_chat_keyboard,
    get_new_orders_keyboard, get_finish_upload_keyboard,
    get_order_confirmation_keyboard,
    get_my_orders_keyboard,
    get_work_in_progress_keyboard,
    get_schedule_menu_keyboard,
    get_day_schedule_keyboard,
    WEEKDAYS, get_balance_orders_keyboard,
    get_referral_program_keyboard,
    get_executor_support_menu_keyboard,
    get_executor_my_tickets_keyboard,
    get_executor_view_ticket_keyboard,
    get_executor_skip_photo_keyboard
)

router = Router()


@router.message(CommandStart())
async def cmd_start_executor(message: types.Message, session: AsyncSession, state: FSMContext, command: CommandObject):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.
    –ï—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é.
    –ï—Å–ª–∏ –Ω–µ—Ç - –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    –¢–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏.
    """
    await state.clear()

    # --- –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–°–´–õ–ö–ò ---
    referral_code = command.args
    if referral_code:
        referrer = await get_user_by_referral_code(session, referral_code)
        if referrer:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await state.update_data(referred_by=referrer.telegram_id)
            await message.answer(f"–í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {referrer.name}.")

    user = await get_user(session, message.from_user.id)
    if user and user.role == UserRole.executor:
        await message.answer(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.name}!",
            reply_markup=get_executor_main_keyboard()
        )
    else:
        await message.answer(
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, "
            "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=get_phone_request_keyboard()
        )
        await state.set_state(ExecutorRegistration.waiting_for_phone)


@router.message(ExecutorRegistration.waiting_for_phone, (F.contact | F.text))
async def register_phone_received(message: types.Message, session: AsyncSession, state: FSMContext):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, —É—á–∏—Ç—ã–≤–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞.
    """
    phone_number = message.contact.phone_number if message.contact else message.text
    user_data = await state.get_data()
    referred_by = user_data.get("referred_by")

    if not phone_number or not phone_number.replace("+", "").isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.")
        return

    new_executor = await register_executor(
        session=session,
        telegram_id=message.from_user.id,
        name=message.from_user.full_name,
        username=message.from_user.username,
        phone=phone_number,
        referred_by=referred_by  # –ü–µ—Ä–µ–¥–∞–µ–º ID –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
    )

    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ, {new_executor.name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
        reply_markup=get_executor_main_keyboard()
    )
    await state.clear()


@router.message(F.text == "üÜï –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã")
async def show_new_orders(message: types.Message, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'new'."""
    user = await get_user(session, message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user and user.status == UserStatus.blocked:
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É–∂–µ –ø—Ä–æ—à–ª–æ, —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º
        if user.blocked_until and user.blocked_until < datetime.datetime.now():
            await unblock_user(session, user.telegram_id)
            await message.answer("‚úÖ –°—Ä–æ–∫ –≤–∞—à–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å—Ç–µ–∫. –í—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã.")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã
        else:
            await message.answer(
                f"‚ùå <b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.</b>\n\n"
                f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã. "
                f"–î–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {user.blocked_until.strftime('%d.%m.%Y –≤ %H:%M')}."
            )
            return

    new_orders = await get_orders_by_status(session, OrderStatus.new, executor_tg_id=message.from_user.id)

    if not new_orders:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.")
        return

    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –≤–∑—è—Ç–∏—è –∑–∞–∫–∞–∑—ã:",
        reply_markup=get_new_orders_keyboard(new_orders)
    )


@router.callback_query(F.data.startswith("executor_view_order:"))
async def executor_view_order(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext, config: Settings):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é."""
    order_id = int(callback.data.split(":")[1])
    order = await get_order_by_id(session, order_id)

    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # --- –ë–ª–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã ---
    try:
        formatted_date = datetime.datetime.strptime(order.selected_date, "%Y-%m-%d").strftime("%d.%m.%Y")
    except (ValueError, TypeError):
        formatted_date = order.selected_date  # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å

    executor_payment = round(order.total_price * 0.85)
    services_list = []
    for item in order.items:
        service_name = ADDITIONAL_SERVICES.get(item.service_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞")
        # –î–ª—è —É—Å–ª—É–≥, –∏–∑–º–µ—Ä—è–µ–º—ã—Ö –≤ —à—Ç—É–∫–∞—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if "—à—Ç" in service_name and item.quantity > 1:
            services_list.append(f"  - {service_name} (x{item.quantity})")
        else:
            services_list.append(f"  - {service_name}")
    services_text = "\n".join(services_list) or "–ù–µ—Ç"

    # –í–Ω–µ–¥—Ä—è–µ–º –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
    financial_block = ""
    if config.system.show_commission_to_executor:
        financial_block = (
            f"<b>–¶–µ–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:</b> {order.total_price} ‚ÇΩ\n"
            f"üí∞ <b>–í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞:</b> {executor_payment} ‚ÇΩ"
        )
    else:
        financial_block = f"üí∞ <b>–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:</b> {executor_payment} ‚ÇΩ"

    order_details = (
        f"üìù <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id}</b>\n\n"
        f"<b>–¢–∏–ø:</b> {order.cleaning_type}\n"
        f"<b>–ö–æ–º–Ω–∞—Ç:</b> {order.room_count}, <b>–°–∞–Ω—É–∑–ª–æ–≤:</b> {order.bathroom_count}\n"
        f"<b>–ê–¥—Ä–µ—Å:</b> {order.address_text}\n"
        f"<b>–î–∞—Ç–∞/–≤—Ä–µ–º—è:</b> {formatted_date}, {order.selected_time}\n\n"
        f"<b>–î–æ–ø. —É—Å–ª—É–≥–∏:</b>\n{services_text}\n\n"
        f"{financial_block}"
    )

    await state.update_data({f"payment_{order_id}": executor_payment})

    await callback.message.answer(order_details, reply_markup=get_order_confirmation_keyboard(order_id))
    await callback.answer()


@router.callback_query(F.data.startswith("executor_accept_order:"))
async def executor_accept_order(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext, bots: dict,
                                config: Settings):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º."""
    order_id = int(callback.data.split(":")[1])
    user_data = await state.get_data()
    payment = user_data.get(f"payment_{order_id}")

    if payment is None:
        order_for_payment = await get_order_by_id(session, order_id)
        if not order_for_payment:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.answer()
            return
        payment = calculate_executor_payment(
            total_price=order_for_payment.total_price,
            commission_type=config.system.commission_type,
            commission_value=config.system.commission_value
        )

    order = await assign_executor_to_order(session, order_id, callback.from_user.id, payment)

    if order:
        await reset_consecutive_declines(session, callback.from_user.id)
        await callback.message.edit_text(
            f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑ ‚Ññ{order.id}. –û–Ω –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª '–ú–æ–∏ –∑–∞–∫–∞–∑—ã'.\n\n"
            f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ 'üöÄ –í –ø—É—Ç–∏', –∫–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ—Å—å –∫ –∫–ª–∏–µ–Ω—Ç—É."
        )
        try:
            await bots["client"].send_message(
                order.client_tg_id,
                f"ü§ù –û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –ù–∞ –≤–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order.id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å."
            )
        except Exception as e:
            await bots["admin"].send_message(config.admin_id,
                                             f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ –∑–∞–∫–∞–∑ ‚Ññ{order.id}. –û—à–∏–±–∫–∞: {e}")
    else:
        await callback.message.edit_text("‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –±—ã–ª –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω.")

    await callback.answer()


@router.callback_query(F.data.startswith("executor_decline_order:"))
async def executor_decline_order(callback: types.CallbackQuery, session: AsyncSession, bots: dict, config: Settings):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–∞–∑ –æ—Ç –∑–∞–∫–∞–∑–∞, –ø—Ä–∏–º–µ–Ω—è–µ—Ç —à—Ç—Ä–∞—Ñ—ã –∏ –ù–ï–ú–ï–î–õ–ï–ù–ù–û –ø–µ—Ä–µ–¥–∞–µ—Ç –∑–∞–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–º—É.
    """
    order_id = int(callback.data.split(":")[1])
    executor_id = callback.from_user.id

    # 1. –ü–æ–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–µ
    await decline_active_offer(session, order_id, executor_id)
    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —ç—Ç–æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Å–Ω–æ–≤–∞
    await add_declined_order(session, order_id, executor_id)

    # 2. –ü—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ–Ω—É—é —Å–∏—Å—Ç–µ–º—É (—ç—Ç–æ—Ç –±–ª–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    user = await increment_and_get_declines(session, executor_id)
    if user and user.consecutive_declines >= 3:
        blocked_user = await block_user_temporarily(session, executor_id, hours=12)
        await callback.message.edit_text(
            f"–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}.\n\n"
            f"‚ö†Ô∏è <b>–í—ã –±—ã–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 12 —á–∞—Å–æ–≤ –∑–∞ 3 –æ—Ç–∫–∞–∑–∞ –ø–æ–¥—Ä—è–¥.</b>\n"
            f"–î–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {blocked_user.blocked_until.strftime('%d.%m.%Y –≤ %H:%M')}."
        )
        await bots["admin"].send_message(
            config.admin_id,
            f"‚ö†Ô∏è <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å @{callback.from_user.username or executor_id} –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 12 —á–∞—Å–æ–≤</b>."
        )
    else:
        await callback.message.edit_text(
            f"–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}.\n\n"
            f"<u>–í–Ω–∏–º–∞–Ω–∏–µ:</u> —É –≤–∞—Å {user.consecutive_declines if user else 0} –æ—Ç–∫–∞–∑(–∞) –ø–æ–¥—Ä—è–¥. "
            f"–ü—Ä–∏ 3 –æ—Ç–∫–∞–∑–∞—Ö –ø–æ–¥—Ä—è–¥ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
        )

    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ ---
    order = await get_order_by_id(session, order_id)
    if not order or order.status != OrderStatus.new:
        await callback.answer()
        return

    all_executors = await get_matching_executors(session, order.selected_date, order.selected_time)

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö, –∫–æ–º—É —É–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞–ª–∏ –∏–ª–∏ –∫—Ç–æ –æ—Ç–∫–∞–∑–∞–ª—Å—è
    declined_stmt = select(DeclinedOrder.executor_tg_id).where(DeclinedOrder.order_id == order_id)
    declined_result = await session.execute(declined_stmt)
    declined_ids = set(declined_result.scalars().all())

    # –ò—â–µ–º –ø–µ—Ä–≤–æ–≥–æ –≤ —Å–ø–∏—Å–∫–µ, –∫–æ—Ç–æ—Ä–æ–º—É –µ—â–µ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–ª–∏
    next_executor = None
    for executor in all_executors:
        if executor.telegram_id not in declined_ids:
            next_executor = executor
            break

        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    if next_executor:
        from app.handlers.client import offer_order_to_executor  # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
        await offer_order_to_executor(session, bots, order, next_executor, config)
    else:
        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å
        await bots["admin"].send_message(
            config.admin_id,
            f"‚ùóÔ∏è<b>–ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑ ‚Ññ{order.id}.</b>\n"
            "–û—á–µ—Ä–µ–¥—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ."
        )

    await callback.answer()


@router.message(F.text == "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def show_my_orders(message: types.Message, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –∑–∞–∫–∞–∑–æ–≤."""
    my_orders = await get_executor_active_orders(session, message.from_user.id)

    if not my_orders:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ.")
        return

    await message.answer(
        "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:",
        reply_markup=get_my_orders_keyboard(my_orders)
    )


@router.callback_query(F.data.startswith("executor_view_my_order:"))
async def executor_view_my_order(callback: types.CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–Ω—è–ª."""
    order_id = int(callback.data.split(":")[1])
    order = await get_order_by_id(session, order_id)

    if not order or order.executor_tg_id != callback.from_user.id:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # --- –ë–ª–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã ---
    try:
        formatted_date = datetime.datetime.strptime(order.selected_date, "%Y-%m-%d").strftime("%d.%m.%Y")
    except (ValueError, TypeError):
        formatted_date = order.selected_date  # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å

    services_text = "\n".join([f"  - {ADDITIONAL_SERVICES[item.service_key]}" for item in order.items]) or "–ù–µ—Ç"

    test_label = " (–¢–ï–°–¢)" if order.is_test else ""
    order_details = (
        f"üìù <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id}{test_label}</b>\n\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {STATUS_MAPPING.get(order.status, '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
        f"<b>–ö–ª–∏–µ–Ω—Ç:</b> {order.order_name}\n"
        f"<b>–ê–¥—Ä–µ—Å:</b> {order.address_text}\n"
        f"<b>–î–∞—Ç–∞/–≤—Ä–µ–º—è:</b> {formatted_date}, {order.selected_time}\n\n"
        f"<b>–î–æ–ø. —É—Å–ª—É–≥–∏:</b>\n{services_text}\n\n"
        f"üí∞ <b>–í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞:</b> {order.executor_payment} ‚ÇΩ"
    )

    await callback.message.answer(order_details, reply_markup=get_work_in_progress_keyboard(order))
    await callback.answer()


@router.callback_query(F.data.startswith("executor_status_ontheway:"))
async def executor_status_on_the_way(callback: types.CallbackQuery, session: AsyncSession, bots: dict,
                                      config: Settings):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–º–µ–Ω—É —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ '–≤ –ø—É—Ç–∏'."""
    order_id = int(callback.data.split(":")[1])
    order = await update_order_status(session, order_id, OrderStatus.on_the_way)

    if order:
        await callback.message.edit_text(
            f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–í –ø—É—Ç–∏'.\n\n"
            f"–ö–æ–≥–¥–∞ –ø—Ä–∏–±—É–¥–µ—Ç–µ –Ω–∞ –º–µ—Å—Ç–æ, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å '‚úÖ –ù–∞—á–∞—Ç—å —É–±–æ—Ä–∫—É'."
        )
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        try:
            await bots["client"].send_message(
                order.client_tg_id,
                f"üöÄ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤—ã–µ—Ö–∞–ª –ø–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É ‚Ññ{order.id}."
            )
        except Exception as e:
            await bots["admin"].send_message(config.admin_id,
                                             f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –æ –≤—ã–µ–∑–¥–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–∑–∞–∫–∞–∑ ‚Ññ{order.id}). –û—à–∏–±–∫–∞: {e}")
    else:
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.")

    await callback.answer()

@router.callback_query(F.data.startswith("executor_status_inprogress:"))
async def executor_status_in_progress(callback: types.CallbackQuery, session: AsyncSession, bots: dict,
                                      config: Settings):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–º–µ–Ω—É —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ '–≤ —Ä–∞–±–æ—Ç–µ' (—É–±–æ—Ä–∫–∞ –Ω–∞—á–∞—Ç–∞)."""
    order_id = int(callback.data.split(":")[1])
    order = await update_order_status(session, order_id, OrderStatus.in_progress)

    if order:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —É–±–æ—Ä–∫–∏
        order.in_progress_at = datetime.datetime.now()
        await session.commit()

        await callback.message.edit_text(
            f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–í —Ä–∞–±–æ—Ç–µ'.\n\n"
            f"–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —É–±–æ—Ä–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ '–ø–æ—Å–ª–µ' –∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å'."
        )
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        try:
            await bots["client"].send_message(
                order.client_tg_id,
                f"üßº –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ —É–±–æ—Ä–∫–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É ‚Ññ{order.id}."
            )
        except Exception as e:
            await bots["admin"].send_message(config.admin_id,
                                             f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –æ –Ω–∞—á–∞–ª–µ —É–±–æ—Ä–∫–∏ (–∑–∞–∫–∞–∑ ‚Ññ{order.id}). –û—à–∏–±–∫–∞: {e}")
    else:
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.")

    await callback.answer()


@router.callback_query(F.data.startswith("executor_upload_photo:"))
async def executor_upload_photo_start(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ '–ø–æ—Å–ª–µ'."""
    order_id = int(callback.data.split(":")[1])
    order = await get_order_by_id(session, order_id)

    current_photos_count = len(order.photos_after_ids) if order and order.photos_after_ids else 0

    await state.update_data(order_id_for_photo=order_id)
    await callback.message.answer(
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –û–î–ù–£ –∏–ª–∏ –ù–ï–°–ö–û–õ–¨–ö–û —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã (–¥–æ 10 —à—Ç.).\n"
        f"–£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {current_photos_count}/10.\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ì–æ—Ç–æ–≤–æ'.",
        reply_markup=get_finish_upload_keyboard()
    )
    await state.set_state(ExecutorRegistration.uploading_photo)
    await callback.answer()


@router.message(ExecutorRegistration.uploading_photo, F.photo)
async def executor_photo_uploaded(message: types.Message, session: AsyncSession, state: FSMContext,
                                  album: List[types.Message] = None):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–Ω–æ —Ñ–æ—Ç–æ –∏–ª–∏ –∞–ª—å–±–æ–º, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –∏ —Å–æ–æ–±—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."""
    user_data = await state.get_data()
    order_id = user_data.get("order_id_for_photo")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø—Ä–∏—à–µ–ª –∞–ª—å–±–æ–º –∏–ª–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ
    photos_to_process = album if album else [message]

    order = await get_order_by_id(session, order_id)
    current_photos_count = len(order.photos_after_ids) if order and order.photos_after_ids else 0

    if current_photos_count + len(photos_to_process) > 10:
        await message.answer(
            f"–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–æ—Ç–æ. –ú–∞–∫—Å–∏–º—É–º - 10, —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {current_photos_count}.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –≤ –ë–î –≤ —Ü–∏–∫–ª–µ
    for msg in photos_to_process:
        photo_id = msg.photo[-1].file_id
        await add_photo_to_order(session, order_id, photo_id)

    new_total_count = current_photos_count + len(photos_to_process)

    await message.answer(
        f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(photos_to_process)} —Ñ–æ—Ç–æ.\n"
        f"–í—Å–µ–≥–æ –¥–ª—è –∑–∞–∫–∞–∑–∞: {new_total_count}/10."
    )


@router.message(ExecutorRegistration.uploading_photo, F.text == "‚úÖ –ì–æ—Ç–æ–≤–æ")
async def executor_upload_finish(message: types.Message, session: AsyncSession, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –¥–µ—Ç–∞–ª—è–º –∑–∞–∫–∞–∑–∞."""
    user_data = await state.get_data()
    order_id = user_data.get("order_id_for_photo")

    await state.clear()
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ.", reply_markup=get_executor_main_keyboard())

    # --- –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ –≤–º–µ—Å—Ç–æ –≤—ã–∑–æ–≤–∞ –¥—Ä—É–≥–æ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞ ---
    order = await get_order_by_id(session, order_id)
    if order:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        try:
            formatted_date = datetime.datetime.strptime(order.selected_date, "%Y-%m-%d").strftime("%d.%m.%Y")
        except (ValueError, TypeError):
            formatted_date = order.selected_date

        services_text = "\n".join([f"  - {ADDITIONAL_SERVICES[item.service_key]}" for item in order.items]) or "–ù–µ—Ç"

        order_details = (
            f"üìù <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id}</b>\n\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {STATUS_MAPPING.get(order.status, '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
            f"<b>–ö–ª–∏–µ–Ω—Ç:</b> {order.order_name}, {order.order_phone}\n"
            f"<b>–ê–¥—Ä–µ—Å:</b> {order.address_text}\n"
            f"<b>–î–∞—Ç–∞/–≤—Ä–µ–º—è:</b> {formatted_date}, {order.selected_time}\n\n"
            f"<b>–î–æ–ø. —É—Å–ª—É–≥–∏:</b>\n{services_text}\n\n"
            f"üí∞ <b>–í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞:</b> {order.executor_payment} ‚ÇΩ"
        )

        await message.answer(order_details, reply_markup=get_work_in_progress_keyboard(order))

@router.message(ExecutorRegistration.uploading_photo, ~F.photo)
async def incorrect_photo_upload(message: types.Message):
    """–õ–æ–≤–∏—Ç –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ —Ñ–æ—Ç–æ, –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏."""
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∞ –Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.")

@router.callback_query(F.data.startswith("executor_complete_order:"))
async def executor_complete_order(callback: types.CallbackQuery, session: AsyncSession, bots: dict, config: Settings):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–∫–∞–∑ –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑."""
    order_id = int(callback.data.split(":")[1])
    order = await get_order_by_id(session, order_id)

    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    if not order.photos_after_ids:
        await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑, –Ω–µ –∑–∞–≥—Ä—É–∑–∏–≤ —Ñ–æ—Ç–æ '–ø–æ—Å–ª–µ'.", show_alert=True)
        return

    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'completed'
    updated_order = await update_order_status(session, order_id, OrderStatus.completed)

    if updated_order:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–±–æ—Ä–∫–∏
        updated_order.completed_at = datetime.datetime.now()
        await session.commit()

        await callback.message.edit_text(f"üéâ –ó–∞–∫–∞–∑ ‚Ññ{order_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")

        # --- –ù–û–í–´–ô –ë–õ–û–ö: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ ---
        executor_user = await get_user(session, updated_order.executor_tg_id)
        if executor_user and executor_user.referred_by:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
            completed_orders = await get_executor_completed_orders(session, executor_user.telegram_id)
            if len(completed_orders) == 1:
                await credit_referral_bonus(session, executor_user.referred_by)
                try:
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –æ –±–æ–Ω—É—Å–µ
                    await bots["executor"].send_message(
                        chat_id=executor_user.referred_by,
                        text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª {executor_user.name} –≤—ã–ø–æ–ª–Ω–∏–ª —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑. –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å 500 ‚ÇΩ!"
                    )
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –±–æ–Ω—É—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {executor_user.referred_by}: {e}")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —Å –ø—Ä–æ—Å—å–±–æ–π –æ–± –æ—Ü–µ–Ω–∫–µ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        try:
            rating_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚≠ê –û—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"rate_order:{order_id}")]
            ])
            await bots["client"].send_message(
                order.client_tg_id,
                f"üéâ –í–∞—à–∞ —É–±–æ—Ä–∫–∞ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞! "
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã –Ω–∞—à–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.",
                reply_markup=rating_keyboard
            )
        except Exception as e:
            await bots["admin"].send_message(config.admin_id,
                                             f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ü–µ–Ω–∫—É –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id}. –û—à–∏–±–∫–∞: {e}")
    else:
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑.")

    await callback.answer()


# --- –ë–õ–û–ö –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ì–†–ê–§–ò–ö–û–ú –†–ê–ë–û–¢–´ ---

def format_schedule_text(schedule_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    text = "üóìÔ∏è <b>–í–∞—à —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b>\n\n"

    has_any_slot = False
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—å –æ–¥–∏–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç –≤–æ –≤—Å–µ–º –≥—Ä–∞—Ñ–∏–∫–µ
    for day_slots in schedule_data.values():
        if day_slots:
            has_any_slot = True
            break

    if not has_any_slot:
        text += "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ —Å–ª–æ—Ç–∞."
        return text

    for day_code, day_name in WEEKDAYS.items():
        slots = schedule_data.get(day_code, [])
        if slots:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ (–ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫–µ)
            sorted_slots = sorted(slots, key=lambda slot: int(slot.split(':')[0]))
            slots_str = ", ".join(sorted_slots)
            text += f"<b>{day_name}:</b> {slots_str}\n"

    return text


@router.message(F.text == "üóìÔ∏è –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã")
async def show_schedule_menu(message: types.Message, session: AsyncSession, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–º —Ä–∞–±–æ—Ç—ã."""
    await state.clear()
    schedule = await get_executor_schedule(session, message.from_user.id)

    schedule_data = {day: getattr(schedule, day, []) for day in WEEKDAYS} if schedule else {}
    await state.set_state(ExecutorRegistration.editing_schedule)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —Å–∞–º –≥—Ä–∞—Ñ–∏–∫, –∏ —Ñ–ª–∞–≥ –µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤ –ë–î
    await state.update_data(schedule=schedule_data, schedule_exists_in_db=(schedule is not None))

    if schedule:
        text = format_schedule_text(schedule_data)
    else:
        text = (
            "üóìÔ∏è <b>–í–∞—à —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b>\n\n"
            "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –≤ –ª—é–±—ã–µ –¥–Ω–∏ –∏ –≤—Ä–µ–º—è.\n\n"
            "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–∞—à –≥—Ä–∞—Ñ–∏–∫."
        )

    text += "\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã."

    await message.answer(text, reply_markup=get_schedule_menu_keyboard())


@router.callback_query(ExecutorRegistration.editing_schedule, F.data.startswith("edit_schedule_day:"))
async def edit_schedule_day(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è."""
    day_code = callback.data.split(":")[1]
    day_name = WEEKDAYS.get(day_code)

    user_data = await state.get_data()
    schedule_data = user_data.get("schedule", {})
    selected_slots = schedule_data.get(day_code, [])

    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è: <b>{day_name}</b>",
        reply_markup=get_day_schedule_keyboard(day_code, selected_slots)
    )
    await callback.answer()


@router.callback_query(ExecutorRegistration.editing_schedule, F.data.startswith("toggle_schedule_slot:"))
async def toggle_schedule_slot(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä/—Å–Ω—è—Ç–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞."""
    _, day_code, slot = callback.data.split(":", 2)

    user_data = await state.get_data()
    schedule_data = user_data.get("schedule", {})

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è, —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    day_slots = schedule_data.get(day_code, [])

    if slot in day_slots:
        day_slots.remove(slot)
    else:
        day_slots.append(slot)

    schedule_data[day_code] = day_slots
    await state.update_data(schedule=schedule_data)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await callback.message.edit_reply_markup(
        reply_markup=get_day_schedule_keyboard(day_code, day_slots)
    )
    await callback.answer()


@router.callback_query(ExecutorRegistration.editing_schedule, F.data == "back_to_schedule_menu")
async def back_to_schedule_menu(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ (–±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î)."""
    user_data = await state.get_data()
    schedule_data = user_data.get("schedule", {})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥—Ä–∞—Ñ–∏–∫ –≤ –ë–î, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    # –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–º –≤—Å–µ –µ—â–µ –Ω—É–∂–µ–Ω –æ–¥–∏–Ω –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–µ–Ω—é
    schedule_in_db = user_data.get("schedule_exists_in_db", False)

    if not schedule_in_db and not any(schedule_data.values()):
        text = (
            "üóìÔ∏è <b>–í–∞—à —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b>\n\n"
            "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –≤ –ª—é–±—ã–µ –¥–Ω–∏ –∏ –≤—Ä–µ–º—è.\n\n"
            "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–∞—à –≥—Ä–∞—Ñ–∏–∫."
        )
    else:
        text = format_schedule_text(schedule_data)

    text += "\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã."

    await callback.message.edit_text(text, reply_markup=get_schedule_menu_keyboard())
    await callback.answer()


@router.callback_query(ExecutorRegistration.editing_schedule, F.data == "save_schedule")
async def save_schedule(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≥—Ä–∞—Ñ–∏–∫–µ –∏ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    user_data = await state.get_data()
    schedule_data = user_data.get("schedule")

    await update_executor_schedule(session, callback.from_user.id, schedule_data)

    await state.clear()
    await callback.message.edit_text("‚úÖ –í–∞—à –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_executor_main_keyboard())
    await callback.answer()


# --- –ë–õ–û–ö –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–û–ú ---

@router.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def show_balance(message: types.Message, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å —Å—É–º–º–æ–π –≤—ã–ø–ª–∞—Ç."""
    completed_orders = await get_executor_completed_orders(session, message.from_user.id, limit=10)

    if not completed_orders:
        await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return

    total_payout = sum(order.executor_payment for order in completed_orders if order.executor_payment is not None)

    text = (
        f"üí∞ <b>–í–∞—à–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(completed_orders)} –∑–∞–∫–∞–∑–æ–≤: {total_payout:.2f} ‚ÇΩ</b>\n\n"
        "–ó–¥–µ—Å—å –ø–æ–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç. "
        "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –≤—ã–ø–ª–∞—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )

    await message.answer(
        text,
        reply_markup=get_balance_orders_keyboard(completed_orders)
    )

@router.message(F.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
async def show_referral_program(message: types.Message, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ."""
    user = await get_user(session, message.from_user.id)
    if not user or not user.referral_code:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    bot_info = await message.bot.get_me()
    bot_username = bot_info.username
    referral_link = f"https://t.me/{bot_username}?start={user.referral_code}"

    # –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–∏–≤—à–∏—Ö –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ (–±–æ–Ω—É—Å –∑–∞ –∑–∞–∫–∞–∑ - 500—Ä)
    completed_count = int(user.referral_balance / 500)

    text = (
        f"<b>üë• –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
        f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ <b>500 ‚ÇΩ</b> –∑–∞ –∫–∞–∂–¥–æ–≥–æ, –∫—Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
        f"<b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n<code>{referral_link}</code>\n\n"
        f"<b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ (–≤—Å–µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π):</b> {user.referrals_count}\n"
        f"<b>–í—ã–ø–æ–ª–Ω–∏–ª–∏ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑:</b> {completed_count}\n"
        f"<b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {user.referral_balance} ‚ÇΩ\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è' –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º."
    )

    await message.answer(text, reply_markup=get_referral_program_keyboard(referral_link=referral_link))

@router.message(F.text == "‚≠ê –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥")
async def show_my_rating(message: types.Message, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –µ–≥–æ —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã."""
    user = await get_user(session, message.from_user.id)
    if not user:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫–∞–∑–æ–≤ —Å –æ—Ç–∑—ã–≤–∞–º–∏
    orders_with_reviews = await get_executor_orders_with_reviews(session, message.from_user.id, limit=5)

    text = (
        f"<b>‚≠ê –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥</b>\n\n"
        f"<b>–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞:</b> {user.average_rating:.2f} –∏–∑ 5.00\n"
        f"<b>–í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫:</b> {user.review_count}\n\n"
    )

    if not orders_with_reviews:
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤."
    else:
        text += "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:</b>\n\n"
        for order in orders_with_reviews:
            text += (
                f"<b>–ó–∞–∫–∞–∑ ‚Ññ{order.id}</b> | –û—Ü–µ–Ω–∫–∞: {'‚≠ê' * order.rating}\n"
                f"<i>¬´{order.review_text}¬ª</i>\n---\n"
            )

    await message.answer(text)

@router.callback_query(ExecutorRegistration.editing_schedule, F.data == "clear_schedule")
async def clear_schedule(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."""
    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≥—Ä–∞—Ñ–∏–∫–∞
    cleared_schedule_data = {day: [] for day in WEEKDAYS}

    # –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ –≤ –ë–î
    await update_executor_schedule(session, callback.from_user.id, cleared_schedule_data)

    await state.clear()
    await callback.message.edit_text(
        "‚úÖ –í–∞—à –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –±—ã–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω.\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö –¥–æ —Ç–µ—Ö –ø–æ—Ä, "
        "–ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –∑–∞–Ω–æ–≤–æ."
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_executor_main_keyboard())
    await callback.answer()


@router.callback_query(F.data.startswith("view_order_photos:"))
async def view_order_photos(callback: types.CallbackQuery, session: AsyncSession, bots: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞."""
    order_id = int(callback.data.split(":")[1])
    order = await get_order_by_id(session, order_id)

    if not order or not order.photo_file_ids:
        await callback.answer("–ö —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.", show_alert=True)
        return

    client_bot = bots.get("client")
    if not client_bot:
        await callback.answer("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    media_group = []
    try:
        for photo_id in order.photo_file_ids:
            # 1. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é –∫–ª–∏–µ–Ω—Ç-–±–æ—Ç–∞
            photo_file = await client_bot.get_file(photo_id)
            photo_bytes_io = await client_bot.download_file(photo_file.file_path)
            photo_bytes = photo_bytes_io.read()

            # 2. –ì–æ—Ç–æ–≤–∏–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            buffered_file = BufferedInputFile(photo_bytes, filename=f"photo_{order_id}.jpg")
            media_group.append(InputMediaPhoto(media=buffered_file))

        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –æ—Ç –∏–º–µ–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ) –±–æ—Ç–∞
        if media_group:
            await callback.message.answer_media_group(media=media_group)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.", show_alert=True)
    finally:
        await callback.answer()

# --- –ë–õ–û–ö: –ß–ê–¢ –° –ö–õ–ò–ï–ù–¢–û–ú ---

@router.callback_query(F.data.startswith("start_chat:"))
async def start_chat_with_partner(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession, config: Settings):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    order_id = int(callback.data.split(":")[1])
    order = await get_order_by_id(session, order_id)

    if not order:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑.", show_alert=True)
        return

    original_message_text = callback.message.text or callback.message.caption or ""
    partner_id = None
    partner_role = None
    welcome_text = ""

    # –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞/–ø–æ–¥–¥–µ—Ä–∂–∫–∏, —ç—Ç–æ –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É
    if "[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" in original_message_text or "[–ü–æ–¥–¥–µ—Ä–∂–∫–∞" in original_message_text:
        partner_id = config.admin_id
        partner_role = "admin"
        welcome_text = f"–í—ã –≤–æ—à–ª–∏ –≤ —á–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order.id}.\n" \
                       "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω—ã. –î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É."
    # –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, —ç—Ç–æ —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º
    elif order.client_tg_id:
        partner_id = order.client_tg_id
        partner_role = "client"
        welcome_text = f"–í—ã –≤–æ—à–ª–∏ –≤ —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order.id}.\n" \
                       "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å—é–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ, –±—É–¥—É—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω—ã –µ–º—É. " \
                       "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è —á–∞—Ç–∞.", show_alert=True)
        return

    await state.set_state(ChatStates.in_chat)
    await state.update_data(
        chat_partner_id=partner_id,
        partner_role=partner_role,
        order_id=order.id
    )
    await callback.message.answer(welcome_text, reply_markup=get_exit_chat_keyboard())
    await callback.answer()


@router.message(ChatStates.in_chat, F.text == "‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞")
async def exit_chat_executor(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."""
    await state.clear()
    await message.answer(
        "–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_executor_main_keyboard()
    )


@router.message(ChatStates.in_chat)
async def forward_message_from_executor(message: types.Message, state: FSMContext, bots: dict):
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∫–ª–∏–µ–Ω—Ç—É –∏–ª–∏ –∞–¥–º–∏–Ω—É."""
    user_data = await state.get_data()
    partner_id = user_data.get("chat_partner_id")
    order_id = user_data.get("order_id")
    partner_role = user_data.get("partner_role") # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    if not all([partner_id, order_id, partner_role]):
        await message.answer("–û—à–∏–±–∫–∞ —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    target_bot = bots.get(partner_role)
    if not target_bot:
        await message.answer(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –±–æ—Ç –¥–ª—è —Ä–æ–ª–∏ '{partner_role}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if message.media_group_id:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –æ–¥–Ω–æ–π –∑–∞ —Ä–∞–∑.")
        return

    prefix = f"üí¨ <b>[–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å | –ó–∞–∫–∞–∑ ‚Ññ{order_id}]:</b>\n"
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –∞–¥–º–∏–Ω—É, –∫–Ω–æ–ø–∫–∞ "–û—Ç–≤–µ—Ç–∏—Ç—å" –µ–º—É –Ω–µ –Ω—É–∂–Ω–∞
    reply_keyboard = get_reply_to_chat_keyboard(order_id) if partner_role != "admin" else None

    try:
        if message.text:
            await target_bot.send_message(partner_id, f"{prefix}{message.text}", reply_markup=reply_keyboard)
        elif message.photo:
            photo_file = await message.bot.get_file(message.photo[-1].file_id)
            photo_bytes_io = await message.bot.download_file(photo_file.file_path)
            photo_to_send = BufferedInputFile(photo_bytes_io.read(), filename="photo.jpg")

            await target_bot.send_photo(
                chat_id=partner_id,
                photo=photo_to_send,
                caption=f"{prefix}{message.caption or ''}",
                reply_markup=reply_keyboard
            )
        await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ {partner_role} {partner_id}: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê ---

@router.callback_query(F.data.startswith("executor_accept_changes:"))
async def executor_accept_changes(callback: types.CallbackQuery, session: AsyncSession, bots: dict, config: Settings):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∑–∞–∫–∞–∑–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º."""
    order_id = int(callback.data.split(":")[1])
    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ 'accepted'
    order = await update_order_status(session, order_id, OrderStatus.accepted)

    if order:
        await callback.message.edit_text(f"‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–∫–∞–∑–µ ‚Ññ{order_id}.")
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        try:
            await bots["client"].send_message(
                chat_id=order.client_tg_id,
                text=f"üëç –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ññ{order_id} —Å –≤–Ω–µ—Å–µ–Ω–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏."
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ –∑–∞–∫–∞–∑—É {order_id}: {e}")
            await bots["admin"].send_message(
                config.admin_id,
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order_id}."
            )
    else:
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑.")

    await callback.answer()

@router.callback_query(F.data.startswith("executor_decline_changes:"))
async def executor_decline_changes(callback: types.CallbackQuery, session: AsyncSession, bots: dict, config: Settings):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–∞–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –æ—Ç –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π."""
    order_id = int(callback.data.split(":")[1])
    order = await get_order_by_id(session, order_id) # –ù—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –°–Ω–∏–º–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å –∑–∞–∫–∞–∑–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø—É–ª
    unassigned_order = await unassign_executor_from_order(session, order_id)

    if unassigned_order:
        await callback.message.edit_text(f"–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}. –ó–∞–∫–∞–∑ –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö.")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        try:
            await bots["client"].send_message(
                chat_id=order.client_tg_id,
                text=(
                    f"‚ùóÔ∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ —Å–º–æ–≥ –ø—Ä–∏–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–∫–∞–∑–µ ‚Ññ{order_id}. "
                    "–ú—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –ø–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –≤–∞—Å."
                )
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –æ—Ç–∫–∞–∑–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ –∑–∞–∫–∞–∑—É {order_id}: {e}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            await bots["admin"].send_message(
                config.admin_id,
                f"‚ùóÔ∏è –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å @{callback.from_user.username or callback.from_user.id} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –ø–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π. "
                "–ó–∞–∫–∞–∑ –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –ø—É–ª –Ω–æ–≤—ã—Ö."
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            await find_and_notify_executors(session, order_id, bots["executor"], config)

        else:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑.")

        await callback.answer()

# --- –ë–õ–û–ö: –°–ò–°–¢–ï–ú–ê –ü–û–î–î–ï–†–ñ–ö–ò –î–õ–Ø –ò–°–ü–û–õ–ù–ò–¢–ï–õ–Ø ---

@router.message(F.text == "üÜò –ü–æ–º–æ—â—å")
async def executor_support_menu(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."""
    await state.clear()
    await message.answer(
        "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ß–µ–º –º—ã –º–æ–∂–µ–º –ø–æ–º–æ—á—å?",
        reply_markup=get_executor_support_menu_keyboard()
    )

@router.callback_query(F.data == "executor_create_ticket")
async def executor_create_ticket_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."""
    await callback.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. "
        "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ."
    )
    await state.set_state(ExecutorSupportStates.creating_ticket_message)
    await callback.answer()

@router.message(ExecutorSupportStates.creating_ticket_message, F.text)
async def executor_ticket_message_received(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ."""
    await state.update_data(ticket_text=message.text)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, —á—Ç–æ–±—ã –ª—É—á—à–µ –æ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É, –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.",
        reply_markup=get_executor_skip_photo_keyboard()
    )
    await state.set_state(ExecutorSupportStates.waiting_for_ticket_photo)

@router.callback_query(F.data == "executor_my_tickets")
async def executor_my_tickets_list(callback: types.CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."""
    user_tickets = await get_user_tickets(session, user_tg_id=callback.from_user.id)
    if not user_tickets:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=get_executor_support_menu_keyboard()
        )
    else:
        await callback.message.edit_text(
            "–í–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:",
            reply_markup=get_executor_my_tickets_keyboard(user_tickets)
        )
    await callback.answer()

@router.callback_query(F.data.startswith("executor_view_ticket:"))
async def executor_view_ticket(callback: types.CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ–ø–∏—Å–∫—É –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∏–∫–µ—Ç—É."""
    ticket_id = int(callback.data.split(":")[1])
    ticket = await get_ticket_by_id(session, ticket_id)

    if not ticket or ticket.user_tg_id != callback.from_user.id:
        await callback.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    history = f"<b>–û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{ticket.id} –æ—Ç {ticket.created_at.strftime('%d.%m.%Y')}</b>\n"
    history += f"–°—Ç–∞—Ç—É—Å: <i>{ticket.status.value}</i>\n\n"

    last_photo_id = None
    for message in sorted(ticket.messages, key=lambda m: m.created_at):
        author = "–í—ã" if message.author == MessageAuthor.client else "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
        time = message.created_at.strftime('%H:%M')
        history += f"<b>{author}</b> ({time}):\n{message.text}\n"
        if message.photo_file_id:
            history += "<i>–ö —Å–æ–æ–±—â–µ–Ω–∏—é –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–æ—Ç–æ.</i>\n"
            last_photo_id = message.photo_file_id
        history += "\n"

    keyboard = get_executor_view_ticket_keyboard(ticket)
    await callback.message.delete()

    if last_photo_id:
        try:
            # –§–æ—Ç–æ –º–æ–≥–ª–æ –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–æ —á–µ—Ä–µ–∑ –ª—é–±–æ–≥–æ –±–æ—Ç–∞, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ executor-–±–æ—Ç–∞
            await callback.message.answer_photo(photo=last_photo_id, caption=history, reply_markup=keyboard)
        except Exception:
            await callback.message.answer(text=history, reply_markup=keyboard)
    else:
        await callback.message.answer(text=history, reply_markup=keyboard)
    await callback.answer()

async def finish_executor_ticket_creation(message: types.Message, state: FSMContext, session: AsyncSession, bots: dict, config: Settings, photo_id: str | None = None):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."""
    user_data = await state.get_data()
    ticket_text = user_data.get("ticket_text")

    new_ticket = await create_ticket(
        session=session,
        user_tg_id=message.from_user.id,
        message_text=ticket_text,
        photo_id=photo_id
    )

    if new_ticket:
        await message.answer(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{new_ticket.id} –ø—Ä–∏–Ω—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É.",
            reply_markup=get_executor_main_keyboard()
        )

        admin_bot = bots["admin"]
        executor_bot = bots["executor"]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, —Ç.–∫. —Ñ–∞–π–ª –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–º–µ–Ω–Ω–æ –µ–º—É

        admin_caption = (
            f"‚ùóÔ∏è <b>–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –ò–°–ü–û–õ–ù–ò–¢–ï–õ–Ø ‚Ññ{new_ticket.id}</b>\n\n"
            f"<b>–û—Ç:</b> @{message.from_user.username or message.from_user.full_name} ({message.from_user.id})\n\n"
            f"<b>–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>\n{ticket_text}"
        )

        go_to_ticket_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–∏–∫–µ—Ç—É", callback_data=f"admin_view_ticket:{new_ticket.id}")]
        ])

        if photo_id:
            photo_file = await executor_bot.get_file(photo_id)
            photo_bytes_io = await executor_bot.download_file(photo_file.file_path)
            photo_bytes = photo_bytes_io.read()
            photo_to_send = BufferedInputFile(photo_bytes, filename="photo.jpg")

            await admin_bot.send_photo(
                chat_id=config.admin_id,
                photo=photo_to_send,
                caption=admin_caption,
                reply_markup=go_to_ticket_keyboard
            )
        else:
            await admin_bot.send_message(
                config.admin_id,
                admin_caption,
                reply_markup=go_to_ticket_keyboard
            )

        user_tickets = await get_user_tickets(session, user_tg_id=message.from_user.id)
        await message.answer(
            "–í–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:",
            reply_markup=get_executor_my_tickets_keyboard(user_tickets)
        )
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await state.clear()


@router.message(ExecutorSupportStates.waiting_for_ticket_photo, F.photo)
async def executor_ticket_photo_received(message: types.Message, state: FSMContext, session: AsyncSession, bots: dict, config: Settings):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–æ—Ç–æ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞."""
    photo_id = message.photo[-1].file_id
    await finish_executor_ticket_creation(message, state, session, bots, config, photo_id)

@router.message(ExecutorSupportStates.waiting_for_ticket_photo, F.text == "‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def executor_ticket_photo_skipped(message: types.Message, state: FSMContext, session: AsyncSession, bots: dict, config: Settings):
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —à–∞–≥ —Å —Ñ–æ—Ç–æ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞."""
    await finish_executor_ticket_creation(message, state, session, bots, config)

@router.callback_query(F.data == "executor_back_to_main_menu")
async def executor_back_to_main_menu(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏."""
    await state.clear()
    await callback.message.edit_text(
        "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ß–µ–º –º—ã –º–æ–∂–µ–º –ø–æ–º–æ—á—å?",
        reply_markup=get_executor_support_menu_keyboard()
    )
    await callback.answer()