from aiogram import F, Router, types
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import BufferedInputFile
from sqlalchemy.ext.asyncio import AsyncSession

from app.database.models import TicketStatus, MessageAuthor
from app.handlers.states import AdminSupportStates
from app.services.db_queries import (
    get_tickets_by_status,
    get_ticket_by_id,
    update_ticket_status,
    add_message_to_ticket
)
from app.keyboards.admin_kb import (
    get_admin_main_keyboard,
    get_admin_support_keyboard,
    get_tickets_list_keyboard,
    get_ticket_work_keyboard,
    get_in_progress_ticket_keyboard,
    get_closed_ticket_keyboard,
    get_answered_ticket_keyboard,
)

router = Router()

@router.message(CommandStart())
async def cmd_start_admin(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        reply_markup=get_admin_main_keyboard()
    )

@router.message(F.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_menu(message: types.Message, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    # –°–æ–±–∏—Ä–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    counts = {
        'new': len(await get_tickets_by_status(session, TicketStatus.new)),
        'in_progress': len(await get_tickets_by_status(session, TicketStatus.in_progress)),
        'answered': len(await get_tickets_by_status(session, TicketStatus.answered)),
        'closed': len(await get_tickets_by_status(session, TicketStatus.closed)),
    }
    await message.answer(
        "–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏:",
        reply_markup=get_admin_support_keyboard(counts=counts)
    )


@router.callback_query(
    F.data.in_({"admin_new_tickets", "admin_in_progress_tickets", "admin_answered_tickets", "admin_closed_tickets"}))
async def list_tickets_by_status(callback: types.CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏."""
    query_data = callback.data
    status_map = {
        "admin_new_tickets": (TicketStatus.new, "–ù–æ–≤—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è"),
        "admin_in_progress_tickets": (TicketStatus.in_progress, "–û–±—Ä–∞—â–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ"),
        "admin_answered_tickets": (TicketStatus.answered, "–û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞"),
        "admin_closed_tickets": (TicketStatus.closed, "–ó–∞–∫—Ä—ã—Ç—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è")
    }

    status, title = status_map.get(query_data)
    list_type = query_data.replace("admin_", "").replace("_tickets", "")

    tickets = await get_tickets_by_status(session, status)

    if not tickets:
        await callback.answer(f"{title} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", show_alert=True)
        return

    text = f"<b>{title}:</b>"
    reply_markup = get_tickets_list_keyboard(tickets, list_type=list_type)

    if callback.message.photo:
        await callback.message.delete()
        await callback.message.answer(text, reply_markup=reply_markup)
    else:
        await callback.message.edit_text(text, reply_markup=reply_markup)

    await callback.answer()

@router.callback_query(F.data.startswith("admin_view_ticket:"))
async def view_ticket_admin(callback: types.CallbackQuery, session: AsyncSession, bots: dict):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–∫–µ—Ç."""
    ticket_id = int(callback.data.split(":")[1])
    ticket = await get_ticket_by_id(session, ticket_id)

    if not ticket:
        await callback.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –°–æ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏
    history = f"<b>–û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{ticket.id} –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {ticket.user.name or ticket.user_tg_id}</b>\n"
    history += f"–°—Ç–∞—Ç—É—Å: <i>{ticket.status.value}</i>\n\n"
    photo_id = None

    first_message = ticket.messages[0] if ticket.messages else None
    if first_message and first_message.photo_file_id:
        photo_id = first_message.photo_file_id

    for message in sorted(ticket.messages, key=lambda m: m.created_at):
        author = "–ö–ª–∏–µ–Ω—Ç" if message.author == MessageAuthor.client else "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
        time = message.created_at.strftime('%H:%M')
        history += f"<b>{author}</b> ({time}):\n{message.text}\n"
        if message.photo_file_id:
            history += "<i>–ö —Å–æ–æ–±—â–µ–Ω–∏—é –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–æ—Ç–æ.</i>\n"
        history += "\n"

        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    reply_markup = None
    if ticket.status == TicketStatus.new:
        reply_markup = get_ticket_work_keyboard(ticket.id)
    elif ticket.status == TicketStatus.in_progress:
        reply_markup = get_in_progress_ticket_keyboard(ticket.id)
    elif ticket.status == TicketStatus.answered:
        reply_markup = get_answered_ticket_keyboard(ticket.id)
    elif ticket.status == TicketStatus.closed:
        reply_markup = get_closed_ticket_keyboard()

    # –ï—Å–ª–∏ –º—ã –Ω–∞—à–ª–∏ —Ñ–æ—Ç–æ, —Å–∫–∞—á–∏–≤–∞–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ –ö–õ–ò–ï–ù–¢-–ë–û–¢–ê –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –ê–î–ú–ò–ù-–ë–û–¢–ê
    if photo_id:
        try:
            client_bot = bots["client"]
            photo_file = await client_bot.get_file(photo_id)
            photo_bytes_io = await client_bot.download_file(photo_file.file_path)
            photo_bytes = photo_bytes_io.read()

            photo_to_send = BufferedInputFile(photo_bytes, filename="photo.jpg")

            await callback.message.delete()
            await callback.message.answer_photo(
                photo=photo_to_send,
                caption=history,
                reply_markup=reply_markup
            )
        except Exception:
            # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏
            await callback.message.answer(history, reply_markup=reply_markup)
    else:
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        await callback.message.edit_text(history, reply_markup=reply_markup)

    await callback.answer()


@router.callback_query(F.data.startswith("admin_take_ticket:"))
async def take_ticket_in_work(callback: types.CallbackQuery, session: AsyncSession, bots: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É'."""
    ticket_id = int(callback.data.split(":")[1])

    # 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –∞–¥–º–∏–Ω–∞
    ticket = await update_ticket_status(
        session,
        ticket_id=ticket_id,
        status=TicketStatus.in_progress,
        admin_tg_id=callback.from_user.id
    )
    if not ticket:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∏–∫–µ—Ç.", show_alert=True)
        return

    # 2. –ü–µ—Ä–µ–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–∫–µ—Ç, —á—Ç–æ–±—ã –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    ticket = await get_ticket_by_id(session, ticket_id)

    # 3. –°–æ–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ (–∫–∞–∫ –≤ view_ticket_admin)
    history = f"<b>–û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{ticket.id} –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {ticket.user.name or ticket.user.tg_id}</b>\n"
    history += f"–°—Ç–∞—Ç—É—Å: <i>{ticket.status.value}</i>\n\n"
    for message in sorted(ticket.messages, key=lambda m: m.created_at):
        author = "–ö–ª–∏–µ–Ω—Ç" if message.author == MessageAuthor.client else "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
        time = message.created_at.strftime('%H:%M')
        history += f"<b>{author}</b> ({time}):\n{message.text}\n"
        if message.photo_file_id:
            history += "<i>–ö —Å–æ–æ–±—â–µ–Ω–∏—é –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–æ—Ç–æ.</i>\n"
        history += "\n"

    # 4. –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–∏–∫–µ—Ç–∞ "–≤ —Ä–∞–±–æ—Ç–µ"
    reply_markup = get_in_progress_ticket_keyboard(ticket_id)

    # 5. –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ)
    if callback.message.photo:
        await callback.message.edit_caption(caption=history, reply_markup=reply_markup)
    else:
        await callback.message.edit_text(history, reply_markup=reply_markup)

    # 6. –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞, —á—Ç–æ –µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∑–∞–Ω—è–ª–∏—Å—å
    try:
        await bots["client"].send_message(
            chat_id=ticket.user_tg_id,
            text=f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{ticket_id}."
        )
    except Exception as e:
        await callback.message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞: {e}")

    await callback.answer("–¢–∏–∫–µ—Ç –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É")


@router.callback_query(F.data.startswith("admin_reply_ticket:"))
async def admin_reply_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —Ç–∏–∫–µ—Ç."""
    ticket_id = int(callback.data.split(":")[1])
    await state.update_data(replying_ticket_id=ticket_id)

    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –æ–¥–Ω–æ —Ñ–æ—Ç–æ."
    )
    await state.set_state(AdminSupportStates.replying_to_ticket)
    await callback.answer()


@router.message(AdminSupportStates.replying_to_ticket, (F.text | F.photo))
async def admin_reply_finish(message: types.Message, state: FSMContext, session: AsyncSession, bots: dict):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–≤–µ—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–¥ –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    user_data = await state.get_data()
    ticket_id = user_data.get("replying_ticket_id")

    ticket = await get_ticket_by_id(session, ticket_id)
    if not ticket:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∏–∫–µ—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
        await state.clear()
        return

    # 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É
    reply_text = message.text or message.caption or ""
    original_photo_id = message.photo[-1].file_id if message.photo else None
    new_photo_id_for_db = None

    client_bot = bots["client"]
    admin_bot = bots["admin"]
    client_message_text = f"üí¨ <b>–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—é ‚Ññ{ticket_id}</b>\n\n{reply_text}"
    go_to_ticket_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚û°Ô∏è –ö —Ç–∏–∫–µ—Ç—É", callback_data=f"view_ticket:{ticket_id}")]
    ])

    try:
        if original_photo_id:
            photo_file = await admin_bot.get_file(original_photo_id)
            photo_bytes_io = await admin_bot.download_file(photo_file.file_path)
            photo_to_send = BufferedInputFile(photo_bytes_io.read(), filename="photo.jpg")

            sent_message = await client_bot.send_photo(
                ticket.user_tg_id, photo=photo_to_send,
                caption=client_message_text, reply_markup=go_to_ticket_keyboard
            )
            new_photo_id_for_db = sent_message.photo[-1].file_id
        else:
            await client_bot.send_message(
                ticket.user_tg_id, text=client_message_text,
                reply_markup=go_to_ticket_keyboard
            )
        await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{ticket_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É: {e}")
        return

    # 2. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º file_id
    await add_message_to_ticket(session, ticket_id, MessageAuthor.admin, reply_text, new_photo_id_for_db)

    # 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–∏–∫–µ—Ç–æ–≤.")
    updated_ticket = await get_ticket_by_id(session, ticket_id)

    history = f"<b>–û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{updated_ticket.id} –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {updated_ticket.user.name or updated_ticket.user.tg_id}</b>\n"
    history += f"–°—Ç–∞—Ç—É—Å: <i>{updated_ticket.status.value}</i>\n\n"
    photo_id_for_admin_view = None

    for msg in sorted(updated_ticket.messages, key=lambda m: m.created_at):
        author = "–ö–ª–∏–µ–Ω—Ç" if msg.author == MessageAuthor.client else "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
        time = msg.created_at.strftime('%H:%M')
        history += f"<b>{author}</b> ({time}):\n{msg.text}\n"
        if msg.photo_file_id:
            history += "<i>–ö —Å–æ–æ–±—â–µ–Ω–∏—é –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–æ—Ç–æ.</i>\n"
            if not photo_id_for_admin_view:
                photo_id_for_admin_view = msg.photo_file_id
        history += "\n"

    reply_markup = get_answered_ticket_keyboard(ticket_id)

    if photo_id_for_admin_view:
        try:
            # –í—Å–µ file_id –≤ –±–∞–∑–µ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ client_bot
            photo_file = await client_bot.get_file(photo_id_for_admin_view)
            photo_bytes_io = await client_bot.download_file(photo_file.file_path)
            photo_to_send = BufferedInputFile(photo_bytes_io.read(), filename="photo.jpg")
            await message.answer_photo(photo=photo_to_send, caption=history, reply_markup=reply_markup)
        except TelegramBadRequest:
            await message.answer(history, reply_markup=reply_markup)
    else:
        await message.answer(history, reply_markup=reply_markup)

@router.callback_query(F.data.startswith("admin_close_ticket:"))
async def admin_close_ticket(callback: types.CallbackQuery, session: AsyncSession, bots: dict):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–∏–∫–µ—Ç –ø–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    ticket_id = int(callback.data.split(":")[1])

    updated_ticket = await update_ticket_status(session, ticket_id, TicketStatus.closed)

    if not updated_ticket:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç.", show_alert=True)
        return

    await callback.message.delete()
    await callback.message.answer(f"–í—ã –∑–∞–∫—Ä—ã–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{ticket_id}.")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await bots["client"].send_message(
            chat_id=updated_ticket.user_tg_id,
            text=f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∑–∞–∫—Ä—ã–ª –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{ticket_id}."
        )
    except Exception as e:
        await callback.message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")

    await callback.answer()