from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.database.models import Ticket, User, UserRole, Order, OrderStatus, UserStatus


def get_admin_main_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    buttons = [
        [KeyboardButton(text="üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏"), KeyboardButton(text="üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        [KeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_admin_support_keyboard(counts: dict) -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–æ —Å—á–µ—Ç—á–∏–∫–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤."""
    builder = InlineKeyboardBuilder()
    builder.button(text=f"üì¨ –ù–æ–≤—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è ({counts.get('new', 0)})", callback_data="admin_new_tickets")
    builder.button(text=f"üë§ –í —Ä–∞–±–æ—Ç–µ ({counts.get('in_progress', 0)})", callback_data="admin_in_progress_tickets")
    builder.button(text=f"üí¨ –û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞ ({counts.get('answered', 0)})", callback_data="admin_answered_tickets")
    builder.button(text=f"‚úÖ –ó–∞–∫—Ä—ã—Ç—ã–µ ({counts.get('closed', 0)})", callback_data="admin_closed_tickets")
    builder.adjust(1)
    return builder.as_markup()


def get_tickets_list_keyboard(tickets: list[Ticket], list_type: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ª—é–±–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤."""
    builder = InlineKeyboardBuilder()
    for ticket in tickets:
        user: User = ticket.user
        theme = ticket.messages[0].text[:20] if ticket.messages else "–ë–µ–∑ —Ç–µ–º—ã"

        author_marker = "üë§"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∫–ª–∏–µ–Ω—Ç
        if user.role == UserRole.executor:
            author_marker = "üõ†Ô∏è"

        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª—è–µ–º –Ω—É–∂–Ω—É—é –∏–∫–æ–Ω–∫—É –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
        if list_type == 'new':
            button_text = f"üì¨ {author_marker} ‚Ññ{ticket.id} –æ—Ç {user.name or user.telegram_id} - ¬´{theme}...¬ª"
        elif list_type == 'in_progress':
            button_text = f"üë§ {author_marker} ‚Ññ{ticket.id} –æ—Ç {user.name or user.telegram_id} - ¬´{theme}...¬ª"
        elif list_type == 'answered':
            button_text = f"üí¨ {author_marker} ‚Ññ{ticket.id} –æ—Ç {user.name or user.telegram_id} - ¬´{theme}...¬ª"
        else:  # closed
            button_text = f"‚úÖ {author_marker} ‚Ññ{ticket.id} –æ—Ç {user.name or user.telegram_id} - ¬´{theme}...¬ª"

        builder.button(text=button_text, callback_data=f"admin_view_ticket:{ticket.id}")

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data="admin_support_menu")
    builder.adjust(1)
    return builder.as_markup()

def get_ticket_work_keyboard(ticket_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π '–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É'."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"admin_take_ticket:{ticket_id}")
    builder.button(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –Ω–æ–≤—ã—Ö", callback_data="admin_new_tickets")
    builder.adjust(1)
    return builder.as_markup()

def get_in_progress_ticket_keyboard(ticket_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–∏–∫–µ—Ç–∞ –≤ —Ä–∞–±–æ—Ç–µ."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É", callback_data=f"admin_reply_ticket:{ticket_id}")
    builder.button(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data=f"admin_close_ticket:{ticket_id}")
    builder.button(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É '–í —Ä–∞–±–æ—Ç–µ'", callback_data="admin_in_progress_tickets")
    builder.adjust(1)
    return builder.as_markup()

def get_closed_ticket_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞."""
    builder = InlineKeyboardBuilder()
    # –î–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å", –Ω–æ –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–∞–¥
    builder.button(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–∫—Ä—ã—Ç—ã—Ö", callback_data="admin_closed_tickets")
    return builder.as_markup()


def get_answered_ticket_keyboard(ticket_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–∏–∫–µ—Ç–∞, –æ–∂–∏–¥–∞—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=f"admin_reply_ticket:{ticket_id}")
    builder.button(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data=f"admin_close_ticket:{ticket_id}")
    builder.button(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É '–û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞'", callback_data="admin_answered_tickets")
    builder.adjust(1)
    return builder.as_markup()

def get_admin_orders_keyboard(counts: dict) -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏."""
    builder = InlineKeyboardBuilder()
    builder.button(text=f"üÜï –ù–æ–≤—ã–µ ({counts.get('new', 0)})", callback_data="admin_orders:new")
    builder.button(text=f"‚è≥ –í —Ä–∞–±–æ—Ç–µ ({counts.get('in_progress', 0)})", callback_data="admin_orders:in_progress")
    builder.button(text=f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ ({counts.get('completed', 0)})", callback_data="admin_orders:completed")
    builder.button(text=f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ ({counts.get('cancelled', 0)})", callback_data="admin_orders:cancelled")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main_menu")
    builder.adjust(2, 2, 1)
    return builder.as_markup()


def get_orders_list_keyboard(orders: list[Order], list_type: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤."""
    builder = InlineKeyboardBuilder()
    for order in orders:
        date_str = order.created_at.strftime('%d.%m')
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –∞–¥—Ä–µ—Å, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ –±—ã–ª–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
        address_preview = order.address_text[:20] + '...' if len(order.address_text) > 20 else order.address_text
        test_label = " (–¢–ï–°–¢)" if order.is_test else ""
        text = f"‚Ññ{order.id}{test_label} –æ—Ç {date_str} - {order.total_price} ‚ÇΩ ({address_preview})"
        builder.button(text=text, callback_data=f"admin_view_order:{order.id}")

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="admin_manage_orders")
    builder.adjust(1)
    return builder.as_markup()

def get_view_order_keyboard_admin(order: Order, list_type: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    builder = InlineKeyboardBuilder()
    order_id = order.id

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —á–∞—Ç–æ–≤
    builder.button(text=f"üí¨ –ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º", callback_data=f"admin_chat:client:{order_id}")
    if order.executor_tg_id:
        builder.button(text=f"üí¨ –ß–∞—Ç —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º", callback_data=f"admin_chat:executor:{order_id}")

    # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if order.status == OrderStatus.new:
        builder.button(text="üë§ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data=f"admin_assign_executor:{order_id}")
    elif order.status in {OrderStatus.accepted, OrderStatus.on_the_way, OrderStatus.in_progress}:
        builder.button(text="üîÑ –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data=f"admin_reassign_executor:{order_id}")
        # –ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã, –µ—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω
        builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É", callback_data=f"admin_edit_payment:{order_id}")


    edit_button = InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑", callback_data=f"admin_edit_order:{order_id}")
    cancel_button = InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"admin_cancel_order:{order_id}")

    # –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω
    if order.status != OrderStatus.cancelled:
        builder.row(edit_button, cancel_button)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤—Å–µ–≥–¥–∞ –≤–Ω–∏–∑—É –∏ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"admin_orders:{list_type}"))

    # –í—ã—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ –æ–¥–Ω–æ–π, –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
    builder.adjust(1)
    return builder.as_markup()

def get_admin_edit_order_keyboard(order_id: int, list_type: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–æ–º."""
    builder = InlineKeyboardBuilder()
    # –ü–æ–∫–∞ –¥–æ–±–∞–≤–∏–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∞–ª–∏–∑—É–µ–º –¥–∞–ª—å—à–µ
    builder.button(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–ø. —É—Å–ª—É–≥–∏", callback_data=f"admin_edit_services:{order_id}")
    builder.button(text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è", callback_data=f"admin_edit_datetime:{order_id}")
    builder.button(text="üìç –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data=f"admin_edit_address:{order_id}")
    builder.button(text="üè† –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç/—Å–∞–Ω—É–∑–ª–æ–≤", callback_data=f"admin_edit_rooms:{order_id}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑—É", callback_data=f"admin_view_order:{order_id}")
    builder.adjust(1)
    return builder.as_markup()

def get_assign_executor_keyboard(executors: list[User], order_id: int, page: int = 0) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    builder = InlineKeyboardBuilder()
    items_per_page = 5
    start_index = page * items_per_page
    end_index = start_index + items_per_page
    paginated_executors = executors[start_index:end_index]

    for executor in paginated_executors:
        # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        text = (f"{executor.name} (–ü: {executor.priority}, –†: {executor.average_rating} ‚≠ê, –ó: {executor.review_count})")
        builder.button(
            text=text,
            callback_data=f"admin_confirm_assign:{order_id}:{executor.telegram_id}"
        )

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    if page > 0:
        pagination_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_assign_page:{order_id}:{page - 1}")
        )
    if end_index < len(executors):
        pagination_buttons.append(
            InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"admin_assign_page:{order_id}:{page + 1}")
        )
    if pagination_buttons:
        builder.row(*pagination_buttons)

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –∑–∞–∫–∞–∑–∞
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"admin_view_order:{order_id}"))
    builder.adjust(1)
    return builder.as_markup()

def get_executors_list_keyboard(executors: list[User], page: int = 0) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    builder = InlineKeyboardBuilder()
    items_per_page = 5
    start_index = page * items_per_page
    end_index = start_index + items_per_page
    paginated_executors = executors[start_index:end_index]

    for executor in paginated_executors:
        status_icon = "‚úÖ" if executor.status == UserStatus.active else "‚ùå"
        text = f"{status_icon} {executor.name} (–ü: {executor.priority}, –†: {executor.average_rating} ‚≠ê)"
        builder.button(
            text=text,
            callback_data=f"admin_view_executor:{executor.telegram_id}:{page}"
        )

    pagination_buttons = []
    if page > 0:
        pagination_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_executors_page:{page - 1}")
        )
    if end_index < len(executors):
        pagination_buttons.append(
            InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"admin_executors_page:{page + 1}")
        )
    if pagination_buttons:
        builder.row(*pagination_buttons)

    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main_menu"))
    builder.adjust(1)
    return builder.as_markup()

def get_view_executor_keyboard_admin(executor: User, page: int, current_user: User,
                                     supervisor: User | None, owner_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."""
    builder = InlineKeyboardBuilder()
    executor_id = executor.telegram_id

    # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if executor.status == UserStatus.active:
        builder.button(text="‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_block_executor:{executor_id}:{page}")
    else:
        builder.button(text="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_unblock_executor:{executor_id}:{page}")

    # –î—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    builder.button(text=f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤", callback_data=f"admin_executor_stats:{executor_id}:{page}")
    builder.button(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", callback_data=f"admin_executor_report:{executor_id}:{page}")
    builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", callback_data=f"admin_edit_priority:{executor_id}:{page}")

    # –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º, –≤–∏–¥–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    if current_user.role == UserRole.admin or current_user.telegram_id == owner_id:
        builder.button(text="üëë –£–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ—Å—Ç—É–ø–æ–º", callback_data=f"admin_manage_access:{executor_id}:{page}")

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"admin_executors_page:{page}")
    builder.adjust(1)
    return builder.as_markup()

def get_block_confirmation_keyboard(executor_id: int, page: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –î–∞, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_confirm_block:{executor_id}:{page}")
    builder.button(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"admin_view_executor:{executor_id}:{page}")
    builder.adjust(1)
    return builder.as_markup()

def get_statistics_menu_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç–æ–≤."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_general_statistics")
    builder.button(text="üèÜ –¢–û–ü –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π", callback_data="show_top_executors")
    builder.button(text="‚ûï –¢–û–ü –¥–æ–ø. —É—Å–ª—É–≥", callback_data="show_top_services")
    builder.button(text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ (Excel)", callback_data="export_orders_period")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main_menu")
    builder.adjust(1)
    return builder.as_markup()

def get_report_period_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–∞."""
    builder = InlineKeyboardBuilder()
    builder.button(text="–ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="report:today")
    builder.button(text="–ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="report:week")
    builder.button(text="–ó–∞ –º–µ—Å—è—Ü", callback_data="report:month")
    builder.button(text="–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è", callback_data="report:all_time")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="reports_menu")
    builder.adjust(2, 2, 1)
    return builder.as_markup()

def get_new_order_admin_keyboard(order_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑", callback_data=f"admin_view_order:{order_id}")
    return builder.as_markup()


def get_manage_access_keyboard(executor: User, page: int, owner_id: int, current_user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∏ —Ä–æ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    builder = InlineKeyboardBuilder()
    executor_id = executor.telegram_id

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏ –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞
    if current_user_id == owner_id:
        if executor.role != UserRole.admin:
            builder.button(text="üëë –°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", callback_data=f"admin_make_admin:{executor_id}:{page}")
        else:
            builder.button(text="üîª –†–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", callback_data=f"admin_remove_admin:{executor_id}:{page}")

        if executor.role != UserRole.supervisor:
            builder.button(text="‚¨ÜÔ∏è –°–¥–µ–ª–∞—Ç—å —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–æ–º", callback_data=f"admin_make_supervisor:{executor_id}:{page}")
        else:
            builder.button(text="‚¨áÔ∏è –°–Ω—è—Ç—å —Å —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–∞", callback_data=f"admin_remove_supervisor:{executor_id}:{page}")


    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è/—Å–Ω—è—Ç–∏—è —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    builder.button(text="üë®‚Äçüíº –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–∞",
                   callback_data=f"admin_assign_supervisor_start:{executor_id}:{page}")
    if executor.supervisor_id:
        builder.button(text="üóëÔ∏è –û—Ç–∫—Ä–µ–ø–∏—Ç—å –æ—Ç —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–∞",
                       callback_data=f"admin_unassign_supervisor:{executor_id}:{page}")

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data=f"admin_view_executor:{executor_id}:{page}")
    builder.adjust(1)
    return builder.as_markup()


def get_supervisors_list_keyboard(supervisors: list[User], executor_id_to_assign: int,
                                  page: int = 0) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞."""
    builder = InlineKeyboardBuilder()

    for supervisor in supervisors:
        text = f"{supervisor.name} (@{supervisor.username})" if supervisor.username else supervisor.name
        builder.button(
            text=text,
            callback_data=f"admin_assign_supervisor_finish:{executor_id_to_assign}:{supervisor.telegram_id}:{page}"
        )

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_manage_access:{executor_id_to_assign}:{page}")
    builder.adjust(1)
    return builder.as_markup()

def get_admin_settings_keyboard(test_mode_status: str, current_user_id: int, owner_id: int) -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏", callback_data="admin_setting:tariffs")
    builder.button(text="üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–µ–π", callback_data="admin_setting:commission")
    builder.button(text=f"üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º ({test_mode_status})", callback_data="admin_setting:test_mode")

    # –ö–Ω–æ–ø–∫–∞ –≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É
    if current_user_id == owner_id:
        builder.button(text="üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π", callback_data="admin_setting:administration")

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main_menu")
    builder.adjust(1)
    return builder.as_markup()


def get_tariff_management_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üßπ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã —É–±–æ—Ä–æ–∫", callback_data="admin_tariff:main")
    builder.button(text="‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏", callback_data="admin_tariff:additional")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings_menu")
    builder.adjust(1)
    return builder.as_markup()


def get_main_tariffs_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    builder = InlineKeyboardBuilder()
    # –≠—Ç–∏ –∫–ª—é—á–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∫–ª—é—á–∞–º–∏ –≤ TARIFFS –≤ price_calculator.py
    builder.button(text="üßΩ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è", callback_data="admin_edit_tariff:üßΩ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è")
    builder.button(text="üßº –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è", callback_data="admin_edit_tariff:üßº –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è")
    builder.button(text="üõ† –ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞", callback_data="admin_edit_tariff:üõ† –ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_setting:tariffs")
    builder.adjust(1)
    return builder.as_markup()


def get_additional_services_edit_keyboard(additional_services: dict) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ–ø. —É—Å–ª—É–≥–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã."""
    builder = InlineKeyboardBuilder()
    for key, text in additional_services.items():
        # –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
        service_name = text.split('(')[0].strip()
        builder.button(text=service_name, callback_data=f"admin_edit_service:{key}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_setting:tariffs")
    builder.adjust(1)
    return builder.as_markup()

def get_commission_management_keyboard(current_type: str, current_value: float, show_commission: bool) -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–µ–π."""
    builder = InlineKeyboardBuilder()
    type_text = "–ü—Ä–æ—Ü–µ–Ω—Ç (%)" if current_type == "percent" else "–§–∏–∫—Å. —Å—É–º–º–∞ (‚ÇΩ)"
    show_text = "–î–∞ ‚úÖ" if show_commission else "–ù–µ—Ç ‚ùå"

    builder.button(text=f"–¢–∏–ø –∫–æ–º–∏—Å—Å–∏–∏: {type_text}", callback_data="admin_commission:change_type")
    builder.button(text=f"–ó–Ω–∞—á–µ–Ω–∏–µ: {current_value}", callback_data="admin_commission:change_value")
    builder.button(text=f"–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–º–∏—Å—Å–∏—é: {show_text}", callback_data="admin_commission:toggle_show")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings_menu")
    builder.adjust(1)
    return builder.as_markup()

def get_administration_management_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", callback_data="admin_admin:list")
    builder.button(text="‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_admin:add_admin")
    builder.button(text="‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å –°—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–∞", callback_data="admin_admin:add_supervisor")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings_menu")
    builder.adjust(1)
    return builder.as_markup()

def get_admin_list_keyboard(admins: list[User]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–æ–≤."""
    builder = InlineKeyboardBuilder()
    for admin in admins:
        role_icon = "üëë" if admin.role == UserRole.admin else "‚¨ÜÔ∏è"
        text = f"{role_icon} {admin.name} (@{admin.username or admin.telegram_id})"
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è —Ä–æ–ª–∏
        builder.button(text=text, callback_data=f"admin_admin:remove_role:{admin.telegram_id}")

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_setting:administration")
    builder.adjust(1)
    return builder.as_markup()

def get_cancel_editing_tariff_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã –¥–ª—è –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_tariff:main")
    return builder.as_markup()
