from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from app.database.models import OrderStatus, Order
import urllib.parse

def get_executor_main_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."""
    buttons = [
        [KeyboardButton(text="üÜï –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã"), KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã")],
        [KeyboardButton(text="üóìÔ∏è –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã"), KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å")],
        [KeyboardButton(text="‚≠ê –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥"), KeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")],
        [KeyboardButton(text="üÜò –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_phone_request_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    buttons = [
        [KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True)]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)

def get_new_orders_keyboard(orders: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤."""
    builder = InlineKeyboardBuilder()
    if orders:
        for order in orders:
            text = f"–ó–∞–∫–∞–∑ ‚Ññ{order.id} –æ—Ç {order.created_at.strftime('%d.%m')} - {order.total_price} ‚ÇΩ"
            builder.button(text=text, callback_data=f"executor_view_order:{order.id}")
    builder.adjust(1)
    return builder.as_markup()

def get_order_confirmation_keyboard(order_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ '–ü—Ä–∏–Ω—è—Ç—å' / '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è' –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"executor_accept_order:{order_id}")
    builder.button(text="‚õîÔ∏è –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"executor_decline_order:{order_id}")
    return builder.as_markup()


def get_my_orders_keyboard(orders: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤."""
    builder = InlineKeyboardBuilder()
    if orders:
        for order in orders:
            if order.status == OrderStatus.in_progress:
                status_icon = "üßº"
            elif order.status == OrderStatus.on_the_way:
                status_icon = "üöó"
            else:  # accepted
                status_icon = "‚úÖ"

            text = f"{status_icon} –ó–∞–∫–∞–∑ ‚Ññ{order.id} –æ—Ç {order.created_at.strftime('%d.%m')} - {order.total_price} ‚ÇΩ"
            builder.button(text=text, callback_data=f"executor_view_my_order:{order.id}")
    builder.adjust(1)
    return builder.as_markup()


def get_work_in_progress_keyboard(order: Order) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–º –ø—Ä–∏–Ω—è—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞."""
    builder = InlineKeyboardBuilder()
    order_id = order.id
    current_status = order.status

    if current_status == OrderStatus.accepted:
        builder.button(text="üöÄ –í –ø—É—Ç–∏", callback_data=f"executor_status_ontheway:{order_id}")

    if current_status == OrderStatus.on_the_way:
        builder.button(text="‚úÖ –ù–∞—á–∞—Ç—å —É–±–æ—Ä–∫—É", callback_data=f"executor_status_inprogress:{order_id}")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if order.photo_file_ids:
        builder.button(text="üñºÔ∏è –§–æ—Ç–æ –∫–≤–∞—Ä—Ç–∏—Ä—ã", callback_data=f"view_order_photos:{order_id}")

    if current_status == OrderStatus.in_progress:
        builder.button(text="üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ ¬´–ø–æ—Å–ª–µ¬ª", callback_data=f"executor_upload_photo:{order_id}")
        builder.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"executor_complete_order:{order_id}")

    builder.button(text="üí¨ –ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º", callback_data=f"start_chat:{order_id}")

    builder.adjust(1)
    return builder.as_markup()

def get_new_order_notification_keyboard(order_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑—É", callback_data=f"executor_view_order:{order_id}")
    return builder.as_markup()


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∏ —Å–ª–æ—Ç–æ–≤, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
WEEKDAYS = {
    "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
    "wednesday": "–°—Ä–µ–¥–∞",
    "thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
    "friday": "–ü—è—Ç–Ω–∏—Ü–∞",
    "saturday": "–°—É–±–±–æ—Ç–∞",
    "sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
}
TIME_SLOTS = ["9:00 - 12:00", "12:00 - 15:00", "15:00 - 18:00", "18:00 - 21:00"]


def get_schedule_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞."""
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 6 –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏, –ø–æ 2 –≤ —Ä—è–¥
    days = list(WEEKDAYS.items())
    for i in range(0, 6, 2):
        builder.row(
            InlineKeyboardButton(text=days[i][1], callback_data=f"edit_schedule_day:{days[i][0]}"),
            InlineKeyboardButton(text=days[i + 1][1], callback_data=f"edit_schedule_day:{days[i + 1][0]}")
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –∏ –∫–Ω–æ–ø–∫—É –£–¥–∞–ª–∏—Ç—å –≤ –æ–¥–∏–Ω —Ä—è–¥
    builder.row(
        InlineKeyboardButton(text=WEEKDAYS["sunday"], callback_data="edit_schedule_day:sunday"),
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å—ë", callback_data="clear_schedule")
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥
    builder.row(InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤—ã–π—Ç–∏", callback_data="save_schedule"))

    return builder.as_markup()


def get_day_schedule_keyboard(day_code: str, selected_slots: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å."""
    builder = InlineKeyboardBuilder()
    for slot in TIME_SLOTS:
        text = f"‚úÖ {slot}" if slot in selected_slots else slot
        builder.button(text=text, callback_data=f"toggle_schedule_slot:{day_code}:{slot}")

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è", callback_data="back_to_schedule_menu")
    builder.adjust(1)
    return builder.as_markup()

def get_balance_orders_keyboard(orders: list[Order]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π."""
    builder = InlineKeyboardBuilder()
    if orders:
        for order in orders:
            # –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú
            date_str = order.created_at.strftime('%d.%m')
            text = f"–ó–∞–∫–∞–∑ ‚Ññ{order.id} –æ—Ç {date_str} - {order.executor_payment} ‚ÇΩ"
            # –î–ª—è –∫–Ω–æ–ø–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–∂–Ω–æ –Ω–µ –¥–µ–ª–∞—Ç—å callback, –ª–∏–±–æ –≤–µ—Å—Ç–∏ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–∞
            builder.button(text=text, callback_data=f"executor_view_my_order:{order.id}")

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –±–∞–ª–∞–Ω—Å—É", callback_data="back_to_balance")
    builder.adjust(1)
    return builder.as_markup()


def get_referral_program_keyboard(referral_link: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    builder = InlineKeyboardBuilder()

    text_to_share = urllib.parse.quote(
        f"–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∫–ª–∏–Ω–∏–Ω–≥–∞ –∏ –Ω–∞—á–Ω–∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å. "
        f"–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø–æ –º–æ–µ–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞!"
    )

    share_url = f"https://t.me/share/url?url={urllib.parse.quote(referral_link)}&text={text_to_share}"

    builder.button(text="üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", url=share_url)
    return builder.as_markup()

def get_exit_chat_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤—ã—Ö–æ–¥–∞ –∏–∑ —á–∞—Ç–∞."""
    buttons = [
        [KeyboardButton(text="‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_reply_to_chat_keyboard(order_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–û—Ç–≤–µ—Ç–∏—Ç—å' –¥–ª—è —á–∞—Ç–∞."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"start_chat:{order_id}")
    return builder.as_markup()

def get_finish_upload_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ."""
    buttons = [
        [KeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_order_changes_confirmation_keyboard(order_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∑–∞–∫–∞–∑–µ."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data=f"executor_accept_changes:{order_id}")
    builder.button(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞", callback_data=f"executor_decline_changes:{order_id}")
    builder.adjust(1)
    return builder.as_markup()