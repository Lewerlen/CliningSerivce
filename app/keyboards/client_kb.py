from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
import calendar
from datetime import datetime
from app.common.texts import STATUS_MAPPING, ADDITIONAL_SERVICES
from app.database.models import Ticket, TicketStatus, Order, OrderStatus



# --- –ù–û–í–´–ô –ë–õ–û–ö: –í–°–ï –î–õ–Ø –ö–ê–õ–ï–ù–î–ê–†–Ø ---
RUSSIAN_MONTHS = [
    "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
    "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
]

async def create_calendar(year: int, month: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    now = datetime.now()
    month_name = RUSSIAN_MONTHS[month - 1]

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
    header_buttons = []
    # –ö–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    if not (year == now.year and month == now.month):
        header_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"month_nav:prev:{year}:{month}")
        )
    header_buttons.append(
        InlineKeyboardButton(text=f"{month_name} {year}", callback_data="ignore")
    )
    # –ö–Ω–æ–ø–∫–∞ "–≤–ø–µ—Ä–µ–¥"
    header_buttons.append(
        InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"month_nav:next:{year}:{month}")
    )
    builder.row(*header_buttons)

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    builder.row(*[InlineKeyboardButton(text=day, callback_data="ignore") for day in days])

    # –î–Ω–∏ –º–µ—Å—è—Ü–∞
    month_calendar = calendar.monthcalendar(year, month)
    for week in month_calendar:
        row_buttons = []
        for day in week:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–Ω—å –ø—Ä–æ—à–µ–¥—à–∏–º
            is_past_day = year == now.year and month == now.month and day < now.day
            if day == 0 or is_past_day:
                row_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
            else:
                row_buttons.append(
                    InlineKeyboardButton(text=str(day), callback_data=f"day:{year}-{month:02d}-{day:02d}"))
        builder.row(*row_buttons)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –∞–¥—Ä–µ—Å—É"
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥—Ä–µ—Å—É", callback_data="back_to_address"))

    return builder.as_markup()

def get_main_menu_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    buttons = [
        [KeyboardButton(text="üì¶ –ó–∞–∫–∞–∑–∞—Ç—å —É–±–æ—Ä–∫—É")],
        [KeyboardButton(text="üí¨ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")],
        [KeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_edit_order_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞."""
    builder = InlineKeyboardBuilder()
    builder.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è", callback_data="edit_datetime")
    builder.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–ø. —É—Å–ª—É–≥–∏", callback_data="edit_services")
    builder.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data="edit_address")
    builder.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç/—Å–∞–Ω—É–∑–ª–æ–≤", callback_data="edit_rooms")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_my_orders")
    builder.adjust(1)
    return builder.as_markup()


def get_active_orders_keyboard(orders: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏ –∫–Ω–æ–ø–∫–æ–π –∞—Ä—Ö–∏–≤–∞."""
    builder = InlineKeyboardBuilder()
    for order in orders:
        test_label = " (–¢–ï–°–¢)" if order.is_test else ""
        text = f"–ó–∞–∫–∞–∑ ‚Ññ{order.id}{test_label} –æ—Ç {order.created_at.strftime('%d.%m.%Y')} - {order.total_price} ‚ÇΩ"
        builder.button(text=text, callback_data=f"view_order:{order.id}")

    builder.button(text="üóÇ –ê—Ä—Ö–∏–≤ –∑–∞–∫–∞–∑–æ–≤", callback_data="view_archive")
    builder.adjust(1)  # –í—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
    return builder.as_markup()

def get_view_order_keyboard(order: Order, can_be_edited: bool) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞."""
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∞ —á–∞—Ç–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω
    if order.status in {OrderStatus.accepted, OrderStatus.on_the_way, OrderStatus.in_progress}:
        builder.button(text="üí¨ –ß–∞—Ç —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º", callback_data=f"start_chat:{order.id}")

    if can_be_edited:
        builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"edit_order:{order.id}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancel_order:{order.id}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_orders_list")
    builder.adjust(1)
    return builder.as_markup()


def get_archive_orders_keyboard(orders: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤."""
    builder = InlineKeyboardBuilder()
    for order in orders:
        status_text = STATUS_MAPPING.get(order.status, order.status.value)
        test_label = " (–¢–ï–°–¢)" if order.is_test else ""
        text = f"–ó–∞–∫–∞–∑ ‚Ññ{order.id}{test_label} –æ—Ç {order.created_at.strftime('%d.%m.%Y')} - {status_text}"
        builder.button(text=text, callback_data=f"view_archive_order:{order.id}")

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_orders_list")
    builder.adjust(1)
    return builder.as_markup()

def get_view_archive_order_keyboard(order_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üîÑ –ó–∞–∫–∞–∑–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"repeat_order:{order_id}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞—Ä—Ö–∏–≤—É", callback_data="view_archive")
    builder.adjust(1)
    return builder.as_markup()

def get_cleaning_type_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É–±–æ—Ä–∫–∏."""
    buttons = [
        [KeyboardButton(text="üßΩ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è")],
        [KeyboardButton(text="üßº –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è")],
        [KeyboardButton(text="üõ† –ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_room_count_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç."""
    buttons = [
        [
            KeyboardButton(text="1"),
            KeyboardButton(text="2"),
            KeyboardButton(text="3"),
            KeyboardButton(text="4"),
            KeyboardButton(text="5+"),
        ],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_bathroom_count_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∞–Ω—É–∑–ª–æ–≤."""
    buttons = [
        [
            KeyboardButton(text="1"),
            KeyboardButton(text="2"),
            KeyboardButton(text="3+"),
        ],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


def get_additional_services_keyboard(selected_services: dict = None) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ–ø. —É—Å–ª—É–≥.
    –û—Ç–º–µ—á–∞–µ—Ç –≥–∞–ª–æ—á–∫–æ–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏.
    """
    if selected_services is None:
        selected_services = {}

    builder = InlineKeyboardBuilder()
    for key, text in ADDITIONAL_SERVICES.items():
        quantity = selected_services.get(key)
        if quantity:
            # –£–±–∏—Ä–∞–µ–º —Ü–µ–Ω—É –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            base_text = text.split('(')[0].strip()
            # –î–ª—è —É—Å–ª—É–≥ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–æ–±–∞–≤–ª—è–µ–º "—à—Ç."
            if key in {"win", "chair"}:
                button_text = f"‚úÖ {base_text} ({quantity} —à—Ç.)"
            else:
                button_text = f"‚úÖ {base_text}"
        else:
            button_text = text
        builder.button(text=button_text, callback_data=f"add_service_{key}")

    # –í—ã—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É—Å–ª—É–≥ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
    builder.adjust(1)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–ì–æ—Ç–æ–≤–æ" –≤ –æ–¥–∏–Ω —Ä—è–¥
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_bathrooms"),
        InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done_services")
    )

    return builder.as_markup()

def get_address_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —à–∞–≥–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞."""
    buttons = [
        [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–æ–ø. —É—Å–ª—É–≥–∞–º")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_date_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã."""
    buttons = [
        [KeyboardButton(text="–°–µ–≥–æ–¥–Ω—è"), KeyboardButton(text="–ó–∞–≤—Ç—Ä–∞")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥—Ä–µ—Å—É")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_time_keyboard(available_slots: list) -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤."""
    builder = ReplyKeyboardBuilder()
    for slot in available_slots:
        builder.add(KeyboardButton(text=slot))
    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    builder.adjust(2)
    # –ö–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥
    builder.row(KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã"))
    return builder.as_markup(resize_keyboard=True)

def get_photo_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —à–∞–≥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ."""
    buttons = [
        [KeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_order_name_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —à–∞–≥–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏."""
    buttons = [
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–æ—Ç–æ")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_order_phone_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —à–∞–≥–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    buttons = [
        [KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True)],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–º–µ–Ω–∏")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_confirmation_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    buttons = [
        [KeyboardButton(text="‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
        [KeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_payment_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã."""
    buttons = [
        [KeyboardButton(text="üí≥ –û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞")],
        [KeyboardButton(text="üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)

def get_address_confirmation_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞."""
    buttons = [
        [KeyboardButton(text="‚úÖ –î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ")],
        [KeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_support_menu_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data="create_ticket")
    builder.button(text="üìñ –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è", callback_data="my_tickets")
    builder.adjust(1)
    return builder.as_markup()


def get_my_tickets_keyboard(tickets: list[Ticket]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    builder = InlineKeyboardBuilder()
    if tickets:
        for ticket in tickets:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º .value –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ enum
            status_text = ticket.status.value
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ç–µ–º—ã
            theme = ticket.messages[0].text[:20] if ticket.messages else "–ë–µ–∑ —Ç–µ–º—ã"
            button_text = f"‚Ññ{ticket.id} - ¬´{theme}...¬ª ({status_text})"
            builder.button(text=button_text, callback_data=f"view_ticket:{ticket.id}")

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="back_to_support_menu")
    builder.adjust(1)
    return builder.as_markup()

def get_view_ticket_keyboard(ticket: Ticket) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–∫–µ—Ç–∞."""
    builder = InlineKeyboardBuilder()

    if ticket.status != TicketStatus.closed:
        builder.button(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_ticket:{ticket.id}")
        builder.button(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data=f"close_ticket:{ticket.id}")

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="my_tickets")
    builder.adjust(1)
    return builder.as_markup()

def get_skip_photo_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'."""
    buttons = [
        [KeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
        [KeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)

# --- –õ–û–ö: –ö–õ–ê–í–ò–ê–¢–£–†–ê –î–õ–Ø –û–¶–ï–ù–ö–ò ---
def get_rating_keyboard(order_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏ –æ—Ç 1 –¥–æ 5."""
    builder = InlineKeyboardBuilder()
    stars = ["‚≠ê", "‚≠ê‚≠ê", "‚≠ê‚≠ê‚≠ê", "‚≠ê‚≠ê‚≠ê‚≠ê", "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê"]
    for i, star in enumerate(stars, 1):
        builder.button(text=star, callback_data=f"set_rating:{order_id}:{i}")
    builder.adjust(1)
    return builder.as_markup()
# --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê ---

def get_exit_chat_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤—ã—Ö–æ–¥–∞ –∏–∑ —á–∞—Ç–∞."""
    buttons = [
        [KeyboardButton(text="‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_reply_to_chat_keyboard(order_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–û—Ç–≤–µ—Ç–∏—Ç—å' –¥–ª—è —á–∞—Ç–∞."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"start_chat:{order_id}")
    return builder.as_markup()

