import datetime
from sqlalchemy.future import select
from aiogram import Bot

from app.database.models import Order, OrderStatus, Ticket, TicketStatus
from app.common.texts import RUSSIAN_MONTHS_GENITIVE
from app.handlers.client import TYUMEN_TZ


async def check_and_send_reminders(bot: Bot, session_pool, admin_id: int): # –î–æ–±–∞–≤–∏–ª–∏ admin_id
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–∫–∞–∑—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 24 –∏ 2 —á–∞—Å–∞.
    """
    now_tyumen = datetime.datetime.now(TYUMEN_TZ)
    # –¢–æ—á–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞ (–º–∏–Ω—É—Å 1 –º–∏–Ω—É—Ç–∞ –æ—Ç —Ç–æ—á–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)
    # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç "—Å–ø–∞–º" –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
    remind_at_24h_from = now_tyumen + datetime.timedelta(hours=24, minutes=-1)
    remind_at_24h_to = now_tyumen + datetime.timedelta(hours=24)

    remind_at_2h_from = now_tyumen + datetime.timedelta(hours=2, minutes=-1)
    remind_at_2h_to = now_tyumen + datetime.timedelta(hours=2)

    async with session_pool() as session:
        # --- –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è 24-—á–∞—Å–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
        stmt_24h = select(Order).where(
            Order.status.in_([OrderStatus.new, OrderStatus.accepted]),
            Order.reminder_24h_sent == False
        )
        orders_to_check_24h = await session.execute(stmt_24h)
        for order in orders_to_check_24h.scalars().all():
            try:
                order_time_str = f"{order.selected_date} {order.selected_time.split(' ')[0]}"
                aware_order_datetime = datetime.datetime.strptime(order_time_str, "%Y-%m-%d %H:%M").replace(tzinfo=TYUMEN_TZ)

                if remind_at_24h_from < aware_order_datetime <= remind_at_24h_to:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    selected_date = datetime.datetime.strptime(order.selected_date, "%Y-%m-%d")
                    formatted_date = f"{selected_date.day} {RUSSIAN_MONTHS_GENITIVE.get(selected_date.month)} {selected_date.year}"
                    text = f"üëã –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∑–∞–≤—Ç—Ä–∞, {formatted_date} –≤ {order.selected_time}, —É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —É–±–æ—Ä–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É: {order.address_text}."
                    await bot.send_message(chat_id=order.client_tg_id, text=text)
                    order.reminder_24h_sent = True
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ 24h –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.id}: {e}")

        # --- –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è 2-—á–∞—Å–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
        stmt_2h = select(Order).where(
            Order.status.in_([OrderStatus.new, OrderStatus.accepted]),
            Order.reminder_2h_sent == False
        )
        orders_to_check_2h = await session.execute(stmt_2h)
        for order in orders_to_check_2h.scalars().all():
            try:
                order_time_str = f"{order.selected_date} {order.selected_time.split(' ')[0]}"
                aware_order_datetime = datetime.datetime.strptime(order_time_str, "%Y-%m-%d %H:%M").replace(tzinfo=TYUMEN_TZ)

                if remind_at_2h_from < aware_order_datetime <= remind_at_2h_to:
                    if order.status == OrderStatus.accepted:
                        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω - –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
                        text = f"üïí –£–±–æ—Ä–∫–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞! –ù–∞—à –∫–ª–∏–Ω–µ—Ä —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç —É –≤–∞—Å –ø–æ –∞–¥—Ä–µ—Å—É: {order.address_text}."
                        await bot.send_message(chat_id=order.client_tg_id, text=text)
                    elif order.status == OrderStatus.new:
                        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ù–ï –Ω–∞–∑–Ω–∞—á–µ–Ω - –±—å–µ–º —Ç—Ä–µ–≤–æ–≥—É –∞–¥–º–∏–Ω—É
                        text = f"‚ö†Ô∏è <b>–°–†–û–ß–ù–û!</b> –ù–µ –Ω–∞–π–¥–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id}, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞!"
                        await bot.send_message(chat_id=admin_id, text=text)
                    order.reminder_2h_sent = True
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ 2h –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.id}: {e}")

        await session.commit()

async def check_and_auto_close_tickets(bot: Bot, session_pool):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∏–∫–µ—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω' –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∏—Ö, –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
    """
    now = datetime.datetime.now()
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
    h24_ago = now - datetime.timedelta(hours=24)
    h48_ago = now - datetime.timedelta(hours=48)

    async with session_pool() as session:
        # 1. –ò—â–µ–º —Ç–∏–∫–µ—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ 24-—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        stmt_remind = select(Ticket).where(
            Ticket.status == TicketStatus.answered,
            Ticket.updated_at < h24_ago,
            Ticket.autoclose_reminder_sent == False
        )
        tickets_to_remind = await session.execute(stmt_remind)
        for ticket in tickets_to_remind.scalars().all():
            try:
                text = (
                    f"üëã –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ –≤–∞—à–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é ‚Ññ{ticket.id}.\n\n"
                    f"–ï—Å–ª–∏ –≤–∞—à –≤–æ–ø—Ä–æ—Å –Ω–µ —Ä–µ—à–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. "
                    f"–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞."
                )
                await bot.send_message(chat_id=ticket.user_tg_id, text=text)
                ticket.autoclose_reminder_sent = True
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ 24—á –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —Ç–∏–∫–µ—Ç—É {ticket.id}: {e}")

        # 2. –ò—â–µ–º —Ç–∏–∫–µ—Ç—ã –¥–ª—è –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è
        stmt_close = select(Ticket).where(
            Ticket.status == TicketStatus.answered,
            Ticket.updated_at < h48_ago
        )
        tickets_to_close = await session.execute(stmt_close)
        for ticket in tickets_to_close.scalars().all():
            try:
                ticket.status = TicketStatus.closed
                ticket.was_autoclosed = True
                text = (
                    f"‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{ticket.id} –±—ã–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç–æ, "
                    f"—Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç –≤–∞—Å –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 48 —á–∞—Å–æ–≤. "
                    f"–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –æ—Å—Ç–∞–ª–∞—Å—å, —Å–æ–∑–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ."
                )
                await bot.send_message(chat_id=ticket.user_tg_id, text=text)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞ {ticket.id}: {e}")

        await session.commit()